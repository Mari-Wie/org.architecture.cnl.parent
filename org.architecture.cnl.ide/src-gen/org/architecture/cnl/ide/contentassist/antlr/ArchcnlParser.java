/*
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.architecture.cnl.ide.contentassist.antlr.internal.InternalArchcnlParser;
import org.architecture.cnl.services.ArchcnlGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ArchcnlParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArchcnlGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArchcnlGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSentenceAccess().getAlternatives(), "rule__Sentence__Alternatives");
			builder.put(grammarAccess.getSentenceAccess().getRuletypeAlternatives_0_2_0(), "rule__Sentence__RuletypeAlternatives_0_2_0");
			builder.put(grammarAccess.getSentenceAccess().getRuletypeAlternatives_1_0(), "rule__Sentence__RuletypeAlternatives_1_0");
			builder.put(grammarAccess.getNegationRuleTypeAccess().getAlternatives(), "rule__NegationRuleType__Alternatives");
			builder.put(grammarAccess.getObjectAccess().getAlternatives(), "rule__Object__Alternatives");
			builder.put(grammarAccess.getObjectAccess().getAlternatives_1_1(), "rule__Object__Alternatives_1_1");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getAlternatives(), "rule__ObjectConceptExpression__Alternatives");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAlternatives_0_1_0_0(), "rule__ObjectConceptExpression__CardinalityAlternatives_0_1_0_0");
			builder.put(grammarAccess.getRelationAccess().getAlternatives(), "rule__Relation__Alternatives");
			builder.put(grammarAccess.getConceptExpressionAccess().getAlternatives_0(), "rule__ConceptExpression__Alternatives_0");
			builder.put(grammarAccess.getStatementListAccess().getAlternatives_1_1(), "rule__StatementList__Alternatives_1_1");
			builder.put(grammarAccess.getDataStatementAccess().getAlternatives(), "rule__DataStatement__Alternatives");
			builder.put(grammarAccess.getFactStatementAccess().getAlternatives_0(), "rule__FactStatement__Alternatives_0");
			builder.put(grammarAccess.getConceptAssertionAccess().getAlternatives_2(), "rule__ConceptAssertion__Alternatives_2");
			builder.put(grammarAccess.getRoleAssertionAccess().getAlternatives(), "rule__RoleAssertion__Alternatives");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getAlternatives_2(), "rule__DatatypePropertyAssertion__Alternatives_2");
			builder.put(grammarAccess.getObjectPropertyAssertionAccess().getAlternatives_2(), "rule__ObjectPropertyAssertion__Alternatives_2");
			builder.put(grammarAccess.getSentenceAccess().getGroup_0(), "rule__Sentence__Group_0__0");
			builder.put(grammarAccess.getNegationRuleTypeAccess().getGroup_1(), "rule__NegationRuleType__Group_1__0");
			builder.put(grammarAccess.getNegationRuleTypeAccess().getGroup_1_0(), "rule__NegationRuleType__Group_1_0__0");
			builder.put(grammarAccess.getAnythingAccess().getGroup(), "rule__Anything__Group__0");
			builder.put(grammarAccess.getNothingAccess().getGroup(), "rule__Nothing__Group__0");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getGroup(), "rule__ConditionalRuleType__Group__0");
			builder.put(grammarAccess.getOnlyCanRuleTypeAccess().getGroup(), "rule__OnlyCanRuleType__Group__0");
			builder.put(grammarAccess.getSubConceptRuleTypeAccess().getGroup(), "rule__SubConceptRuleType__Group__0");
			builder.put(grammarAccess.getMustRuleTypeAccess().getGroup(), "rule__MustRuleType__Group__0");
			builder.put(grammarAccess.getObjectAccess().getGroup_1(), "rule__Object__Group_1__0");
			builder.put(grammarAccess.getCanOnlyRuleTypeAccess().getGroup(), "rule__CanOnlyRuleType__Group__0");
			builder.put(grammarAccess.getCardinalityRuleTypeAccess().getGroup(), "rule__CardinalityRuleType__Group__0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getGroup_0(), "rule__ObjectConceptExpression__Group_0__0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getGroup_0_1(), "rule__ObjectConceptExpression__Group_0_1__0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getGroup_1(), "rule__ObjectConceptExpression__Group_1__0");
			builder.put(grammarAccess.getAndObjectConceptExpressionAccess().getGroup(), "rule__AndObjectConceptExpression__Group__0");
			builder.put(grammarAccess.getOrObjectConceptExpressionAccess().getGroup(), "rule__OrObjectConceptExpression__Group__0");
			builder.put(grammarAccess.getDatatypeRelationAccess().getGroup(), "rule__DatatypeRelation__Group__0");
			builder.put(grammarAccess.getConceptExpressionAccess().getGroup(), "rule__ConceptExpression__Group__0");
			builder.put(grammarAccess.getThatExpressionAccess().getGroup(), "rule__ThatExpression__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup_1(), "rule__StatementList__Group_1__0");
			builder.put(grammarAccess.getVariableStatementAccess().getGroup(), "rule__VariableStatement__Group__0");
			builder.put(grammarAccess.getFactStatementAccess().getGroup(), "rule__FactStatement__Group__0");
			builder.put(grammarAccess.getConceptAssertionAccess().getGroup(), "rule__ConceptAssertion__Group__0");
			builder.put(grammarAccess.getRoleAssertionAccess().getGroup_1(), "rule__RoleAssertion__Group_1__0");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getGroup(), "rule__DatatypePropertyAssertion__Group__0");
			builder.put(grammarAccess.getObjectPropertyAssertionAccess().getGroup(), "rule__ObjectPropertyAssertion__Group__0");
			builder.put(grammarAccess.getModelAccess().getSentenceAssignment(), "rule__Model__SentenceAssignment");
			builder.put(grammarAccess.getSentenceAccess().getSubjectAssignment_0_1(), "rule__Sentence__SubjectAssignment_0_1");
			builder.put(grammarAccess.getSentenceAccess().getRuletypeAssignment_0_2(), "rule__Sentence__RuletypeAssignment_0_2");
			builder.put(grammarAccess.getSentenceAccess().getRuletypeAssignment_1(), "rule__Sentence__RuletypeAssignment_1");
			builder.put(grammarAccess.getSentenceAccess().getFactsAssignment_2(), "rule__Sentence__FactsAssignment_2");
			builder.put(grammarAccess.getNegationRuleTypeAccess().getSubjectAssignment_1_0_1(), "rule__NegationRuleType__SubjectAssignment_1_0_1");
			builder.put(grammarAccess.getNegationRuleTypeAccess().getObjectAssignment_1_0_3(), "rule__NegationRuleType__ObjectAssignment_1_0_3");
			builder.put(grammarAccess.getAnythingAccess().getRelationAssignment_0(), "rule__Anything__RelationAssignment_0");
			builder.put(grammarAccess.getNothingAccess().getObjectAssignment_2(), "rule__Nothing__ObjectAssignment_2");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getStartAssignment_0(), "rule__ConditionalRuleType__StartAssignment_0");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getSubjectAssignment_1(), "rule__ConditionalRuleType__SubjectAssignment_1");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getRelationAssignment_2(), "rule__ConditionalRuleType__RelationAssignment_2");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getObjectAssignment_3(), "rule__ConditionalRuleType__ObjectAssignment_3");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getRelation2Assignment_8(), "rule__ConditionalRuleType__Relation2Assignment_8");
			builder.put(grammarAccess.getConditionalRuleTypeAccess().getObject2Assignment_10(), "rule__ConditionalRuleType__Object2Assignment_10");
			builder.put(grammarAccess.getOnlyCanRuleTypeAccess().getStartAssignment_0(), "rule__OnlyCanRuleType__StartAssignment_0");
			builder.put(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectAssignment_1(), "rule__OnlyCanRuleType__SubjectAssignment_1");
			builder.put(grammarAccess.getOnlyCanRuleTypeAccess().getObjectAssignment_3(), "rule__OnlyCanRuleType__ObjectAssignment_3");
			builder.put(grammarAccess.getSubConceptRuleTypeAccess().getModifierAssignment_0(), "rule__SubConceptRuleType__ModifierAssignment_0");
			builder.put(grammarAccess.getSubConceptRuleTypeAccess().getObjectAssignment_2(), "rule__SubConceptRuleType__ObjectAssignment_2");
			builder.put(grammarAccess.getMustRuleTypeAccess().getModifierAssignment_0(), "rule__MustRuleType__ModifierAssignment_0");
			builder.put(grammarAccess.getMustRuleTypeAccess().getObjectAssignment_1(), "rule__MustRuleType__ObjectAssignment_1");
			builder.put(grammarAccess.getObjectAccess().getAnythingAssignment_0(), "rule__Object__AnythingAssignment_0");
			builder.put(grammarAccess.getObjectAccess().getExpressionAssignment_1_0(), "rule__Object__ExpressionAssignment_1_0");
			builder.put(grammarAccess.getObjectAccess().getObjectAndListAssignment_1_1_0(), "rule__Object__ObjectAndListAssignment_1_1_0");
			builder.put(grammarAccess.getObjectAccess().getObjectOrListAssignment_1_1_1(), "rule__Object__ObjectOrListAssignment_1_1_1");
			builder.put(grammarAccess.getCanOnlyRuleTypeAccess().getModifierAssignment_0(), "rule__CanOnlyRuleType__ModifierAssignment_0");
			builder.put(grammarAccess.getCanOnlyRuleTypeAccess().getObjectAssignment_1(), "rule__CanOnlyRuleType__ObjectAssignment_1");
			builder.put(grammarAccess.getCardinalityRuleTypeAccess().getModiferAssignment_0(), "rule__CardinalityRuleType__ModiferAssignment_0");
			builder.put(grammarAccess.getCardinalityRuleTypeAccess().getObjectAssignment_1(), "rule__CardinalityRuleType__ObjectAssignment_1");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_0_0(), "rule__ObjectConceptExpression__RelationAssignment_0_0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAssignment_0_1_0(), "rule__ObjectConceptExpression__CardinalityAssignment_0_1_0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getNumberAssignment_0_1_1(), "rule__ObjectConceptExpression__NumberAssignment_0_1_1");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getConceptAssignment_0_2(), "rule__ObjectConceptExpression__ConceptAssignment_0_2");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_1_0(), "rule__ObjectConceptExpression__RelationAssignment_1_0");
			builder.put(grammarAccess.getObjectConceptExpressionAccess().getDataAssignment_1_1(), "rule__ObjectConceptExpression__DataAssignment_1_1");
			builder.put(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionAssignment_1(), "rule__AndObjectConceptExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionAssignment_1(), "rule__OrObjectConceptExpression__ExpressionAssignment_1");
			builder.put(grammarAccess.getDatatypeRelationAccess().getRelationNameAssignment_0(), "rule__DatatypeRelation__RelationNameAssignment_0");
			builder.put(grammarAccess.getObjectRelationAccess().getRelationNameAssignment(), "rule__ObjectRelation__RelationNameAssignment");
			builder.put(grammarAccess.getConceptExpressionAccess().getConceptAssignment_1(), "rule__ConceptExpression__ConceptAssignment_1");
			builder.put(grammarAccess.getConceptExpressionAccess().getThatAssignment_2(), "rule__ConceptExpression__ThatAssignment_2");
			builder.put(grammarAccess.getThatExpressionAccess().getListAssignment_2(), "rule__ThatExpression__ListAssignment_2");
			builder.put(grammarAccess.getStatementListAccess().getRelationAssignment_1_0(), "rule__StatementList__RelationAssignment_1_0");
			builder.put(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_0(), "rule__StatementList__ExpressionAssignment_1_1_0");
			builder.put(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_1(), "rule__StatementList__ExpressionAssignment_1_1_1");
			builder.put(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_2(), "rule__StatementList__ExpressionAssignment_1_1_2");
			builder.put(grammarAccess.getVariableStatementAccess().getConceptAssignment_0(), "rule__VariableStatement__ConceptAssignment_0");
			builder.put(grammarAccess.getVariableStatementAccess().getVariableAssignment_1(), "rule__VariableStatement__VariableAssignment_1");
			builder.put(grammarAccess.getDataStatementAccess().getStringValueAssignment_0(), "rule__DataStatement__StringValueAssignment_0");
			builder.put(grammarAccess.getDataStatementAccess().getIntValueAssignment_1(), "rule__DataStatement__IntValueAssignment_1");
			builder.put(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_0(), "rule__FactStatement__AssertionAssignment_0_0");
			builder.put(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_1(), "rule__FactStatement__AssertionAssignment_0_1");
			builder.put(grammarAccess.getConceptAssertionAccess().getIndividualAssignment_0(), "rule__ConceptAssertion__IndividualAssignment_0");
			builder.put(grammarAccess.getConceptAssertionAccess().getConceptAssignment_3(), "rule__ConceptAssertion__ConceptAssignment_3");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getIndividualAssignment_0(), "rule__DatatypePropertyAssertion__IndividualAssignment_0");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getRelationAssignment_1(), "rule__DatatypePropertyAssertion__RelationAssignment_1");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getStringAssignment_2_0(), "rule__DatatypePropertyAssertion__StringAssignment_2_0");
			builder.put(grammarAccess.getDatatypePropertyAssertionAccess().getIntAssignment_2_1(), "rule__DatatypePropertyAssertion__IntAssignment_2_1");
			builder.put(grammarAccess.getObjectPropertyAssertionAccess().getIndividualAssignment_0(), "rule__ObjectPropertyAssertion__IndividualAssignment_0");
			builder.put(grammarAccess.getObjectPropertyAssertionAccess().getRelationAssignment_1(), "rule__ObjectPropertyAssertion__RelationAssignment_1");
			builder.put(grammarAccess.getObjectPropertyAssertionAccess().getConceptAssignment_3(), "rule__ObjectPropertyAssertion__ConceptAssignment_3");
			builder.put(grammarAccess.getConceptAccess().getConceptNameAssignment(), "rule__Concept__ConceptNameAssignment");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArchcnlGrammarAccess grammarAccess;

	@Override
	protected InternalArchcnlParser createParser() {
		InternalArchcnlParser result = new InternalArchcnlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArchcnlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArchcnlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
