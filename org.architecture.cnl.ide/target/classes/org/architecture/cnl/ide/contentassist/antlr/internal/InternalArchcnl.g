/*
 * generated by Xtext 2.22.0
 */
grammar InternalArchcnl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.architecture.cnl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.architecture.cnl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.architecture.cnl.services.ArchcnlGrammarAccess;

}
@parser::members {
	private ArchcnlGrammarAccess grammarAccess;

	public void setGrammarAccess(ArchcnlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getSentenceAssignment()); }
		(rule__Model__SentenceAssignment)*
		{ after(grammarAccess.getModelAccess().getSentenceAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSentence
entryRuleSentence
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSentenceAccess().getAlternatives()); }
		(rule__Sentence__Alternatives)
		{ after(grammarAccess.getSentenceAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNegationRuleType
entryRuleNegationRuleType
:
{ before(grammarAccess.getNegationRuleTypeRule()); }
	 ruleNegationRuleType
{ after(grammarAccess.getNegationRuleTypeRule()); } 
	 EOF 
;

// Rule NegationRuleType
ruleNegationRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNegationRuleTypeAccess().getAlternatives()); }
		(rule__NegationRuleType__Alternatives)
		{ after(grammarAccess.getNegationRuleTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnything
entryRuleAnything
:
{ before(grammarAccess.getAnythingRule()); }
	 ruleAnything
{ after(grammarAccess.getAnythingRule()); } 
	 EOF 
;

// Rule Anything
ruleAnything 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnythingAccess().getGroup()); }
		(rule__Anything__Group__0)
		{ after(grammarAccess.getAnythingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNothing
entryRuleNothing
:
{ before(grammarAccess.getNothingRule()); }
	 ruleNothing
{ after(grammarAccess.getNothingRule()); } 
	 EOF 
;

// Rule Nothing
ruleNothing 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNothingAccess().getGroup()); }
		(rule__Nothing__Group__0)
		{ after(grammarAccess.getNothingAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalRuleType
entryRuleConditionalRuleType
:
{ before(grammarAccess.getConditionalRuleTypeRule()); }
	 ruleConditionalRuleType
{ after(grammarAccess.getConditionalRuleTypeRule()); } 
	 EOF 
;

// Rule ConditionalRuleType
ruleConditionalRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getGroup()); }
		(rule__ConditionalRuleType__Group__0)
		{ after(grammarAccess.getConditionalRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOnlyCanRuleType
entryRuleOnlyCanRuleType
:
{ before(grammarAccess.getOnlyCanRuleTypeRule()); }
	 ruleOnlyCanRuleType
{ after(grammarAccess.getOnlyCanRuleTypeRule()); } 
	 EOF 
;

// Rule OnlyCanRuleType
ruleOnlyCanRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOnlyCanRuleTypeAccess().getGroup()); }
		(rule__OnlyCanRuleType__Group__0)
		{ after(grammarAccess.getOnlyCanRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubConceptRuleType
entryRuleSubConceptRuleType
:
{ before(grammarAccess.getSubConceptRuleTypeRule()); }
	 ruleSubConceptRuleType
{ after(grammarAccess.getSubConceptRuleTypeRule()); } 
	 EOF 
;

// Rule SubConceptRuleType
ruleSubConceptRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubConceptRuleTypeAccess().getGroup()); }
		(rule__SubConceptRuleType__Group__0)
		{ after(grammarAccess.getSubConceptRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMustRuleType
entryRuleMustRuleType
:
{ before(grammarAccess.getMustRuleTypeRule()); }
	 ruleMustRuleType
{ after(grammarAccess.getMustRuleTypeRule()); } 
	 EOF 
;

// Rule MustRuleType
ruleMustRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMustRuleTypeAccess().getGroup()); }
		(rule__MustRuleType__Group__0)
		{ after(grammarAccess.getMustRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObject
entryRuleObject
:
{ before(grammarAccess.getObjectRule()); }
	 ruleObject
{ after(grammarAccess.getObjectRule()); } 
	 EOF 
;

// Rule Object
ruleObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAccess().getAlternatives()); }
		(rule__Object__Alternatives)
		{ after(grammarAccess.getObjectAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCanOnlyRuleType
entryRuleCanOnlyRuleType
:
{ before(grammarAccess.getCanOnlyRuleTypeRule()); }
	 ruleCanOnlyRuleType
{ after(grammarAccess.getCanOnlyRuleTypeRule()); } 
	 EOF 
;

// Rule CanOnlyRuleType
ruleCanOnlyRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCanOnlyRuleTypeAccess().getGroup()); }
		(rule__CanOnlyRuleType__Group__0)
		{ after(grammarAccess.getCanOnlyRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCardinalityRuleType
entryRuleCardinalityRuleType
:
{ before(grammarAccess.getCardinalityRuleTypeRule()); }
	 ruleCardinalityRuleType
{ after(grammarAccess.getCardinalityRuleTypeRule()); } 
	 EOF 
;

// Rule CardinalityRuleType
ruleCardinalityRuleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCardinalityRuleTypeAccess().getGroup()); }
		(rule__CardinalityRuleType__Group__0)
		{ after(grammarAccess.getCardinalityRuleTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectConceptExpression
entryRuleObjectConceptExpression
:
{ before(grammarAccess.getObjectConceptExpressionRule()); }
	 ruleObjectConceptExpression
{ after(grammarAccess.getObjectConceptExpressionRule()); } 
	 EOF 
;

// Rule ObjectConceptExpression
ruleObjectConceptExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getAlternatives()); }
		(rule__ObjectConceptExpression__Alternatives)
		{ after(grammarAccess.getObjectConceptExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndObjectConceptExpression
entryRuleAndObjectConceptExpression
:
{ before(grammarAccess.getAndObjectConceptExpressionRule()); }
	 ruleAndObjectConceptExpression
{ after(grammarAccess.getAndObjectConceptExpressionRule()); } 
	 EOF 
;

// Rule AndObjectConceptExpression
ruleAndObjectConceptExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndObjectConceptExpressionAccess().getGroup()); }
		(rule__AndObjectConceptExpression__Group__0)
		{ after(grammarAccess.getAndObjectConceptExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrObjectConceptExpression
entryRuleOrObjectConceptExpression
:
{ before(grammarAccess.getOrObjectConceptExpressionRule()); }
	 ruleOrObjectConceptExpression
{ after(grammarAccess.getOrObjectConceptExpressionRule()); } 
	 EOF 
;

// Rule OrObjectConceptExpression
ruleOrObjectConceptExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrObjectConceptExpressionAccess().getGroup()); }
		(rule__OrObjectConceptExpression__Group__0)
		{ after(grammarAccess.getOrObjectConceptExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getAlternatives()); }
		(rule__Relation__Alternatives)
		{ after(grammarAccess.getRelationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatypeRelation
entryRuleDatatypeRelation
:
{ before(grammarAccess.getDatatypeRelationRule()); }
	 ruleDatatypeRelation
{ after(grammarAccess.getDatatypeRelationRule()); } 
	 EOF 
;

// Rule DatatypeRelation
ruleDatatypeRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypeRelationAccess().getGroup()); }
		(rule__DatatypeRelation__Group__0)
		{ after(grammarAccess.getDatatypeRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectRelation
entryRuleObjectRelation
:
{ before(grammarAccess.getObjectRelationRule()); }
	 ruleObjectRelation
{ after(grammarAccess.getObjectRelationRule()); } 
	 EOF 
;

// Rule ObjectRelation
ruleObjectRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectRelationAccess().getRelationNameAssignment()); }
		(rule__ObjectRelation__RelationNameAssignment)
		{ after(grammarAccess.getObjectRelationAccess().getRelationNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptExpression
entryRuleConceptExpression
:
{ before(grammarAccess.getConceptExpressionRule()); }
	 ruleConceptExpression
{ after(grammarAccess.getConceptExpressionRule()); } 
	 EOF 
;

// Rule ConceptExpression
ruleConceptExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptExpressionAccess().getGroup()); }
		(rule__ConceptExpression__Group__0)
		{ after(grammarAccess.getConceptExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleThatExpression
entryRuleThatExpression
:
{ before(grammarAccess.getThatExpressionRule()); }
	 ruleThatExpression
{ after(grammarAccess.getThatExpressionRule()); } 
	 EOF 
;

// Rule ThatExpression
ruleThatExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getThatExpressionAccess().getGroup()); }
		(rule__ThatExpression__Group__0)
		{ after(grammarAccess.getThatExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatementList
entryRuleStatementList
:
{ before(grammarAccess.getStatementListRule()); }
	 ruleStatementList
{ after(grammarAccess.getStatementListRule()); } 
	 EOF 
;

// Rule StatementList
ruleStatementList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementListAccess().getGroup()); }
		(rule__StatementList__Group__0)
		{ after(grammarAccess.getStatementListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableStatement
entryRuleVariableStatement
:
{ before(grammarAccess.getVariableStatementRule()); }
	 ruleVariableStatement
{ after(grammarAccess.getVariableStatementRule()); } 
	 EOF 
;

// Rule VariableStatement
ruleVariableStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableStatementAccess().getGroup()); }
		(rule__VariableStatement__Group__0)
		{ after(grammarAccess.getVariableStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataStatement
entryRuleDataStatement
:
{ before(grammarAccess.getDataStatementRule()); }
	 ruleDataStatement
{ after(grammarAccess.getDataStatementRule()); } 
	 EOF 
;

// Rule DataStatement
ruleDataStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataStatementAccess().getAlternatives()); }
		(rule__DataStatement__Alternatives)
		{ after(grammarAccess.getDataStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactStatement
entryRuleFactStatement
:
{ before(grammarAccess.getFactStatementRule()); }
	 ruleFactStatement
{ after(grammarAccess.getFactStatementRule()); } 
	 EOF 
;

// Rule FactStatement
ruleFactStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactStatementAccess().getGroup()); }
		(rule__FactStatement__Group__0)
		{ after(grammarAccess.getFactStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConceptAssertion
entryRuleConceptAssertion
:
{ before(grammarAccess.getConceptAssertionRule()); }
	 ruleConceptAssertion
{ after(grammarAccess.getConceptAssertionRule()); } 
	 EOF 
;

// Rule ConceptAssertion
ruleConceptAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAssertionAccess().getGroup()); }
		(rule__ConceptAssertion__Group__0)
		{ after(grammarAccess.getConceptAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRoleAssertion
entryRuleRoleAssertion
:
{ before(grammarAccess.getRoleAssertionRule()); }
	 ruleRoleAssertion
{ after(grammarAccess.getRoleAssertionRule()); } 
	 EOF 
;

// Rule RoleAssertion
ruleRoleAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRoleAssertionAccess().getAlternatives()); }
		(rule__RoleAssertion__Alternatives)
		{ after(grammarAccess.getRoleAssertionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDatatypePropertyAssertion
entryRuleDatatypePropertyAssertion
:
{ before(grammarAccess.getDatatypePropertyAssertionRule()); }
	 ruleDatatypePropertyAssertion
{ after(grammarAccess.getDatatypePropertyAssertionRule()); } 
	 EOF 
;

// Rule DatatypePropertyAssertion
ruleDatatypePropertyAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getGroup()); }
		(rule__DatatypePropertyAssertion__Group__0)
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectPropertyAssertion
entryRuleObjectPropertyAssertion
:
{ before(grammarAccess.getObjectPropertyAssertionRule()); }
	 ruleObjectPropertyAssertion
{ after(grammarAccess.getObjectPropertyAssertionRule()); } 
	 EOF 
;

// Rule ObjectPropertyAssertion
ruleObjectPropertyAssertion 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getGroup()); }
		(rule__ObjectPropertyAssertion__Group__0)
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getConceptNameAssignment()); }
		(rule__Concept__ConceptNameAssignment)
		{ after(grammarAccess.getConceptAccess().getConceptNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getGroup_0()); }
		(rule__Sentence__Group_0__0)
		{ after(grammarAccess.getSentenceAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeAssignment_1()); }
		(rule__Sentence__RuletypeAssignment_1)
		{ after(grammarAccess.getSentenceAccess().getRuletypeAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getFactsAssignment_2()); }
		(rule__Sentence__FactsAssignment_2)
		{ after(grammarAccess.getSentenceAccess().getFactsAssignment_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__RuletypeAlternatives_0_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeMustRuleTypeParserRuleCall_0_2_0_0()); }
		ruleMustRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeMustRuleTypeParserRuleCall_0_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeCanOnlyRuleTypeParserRuleCall_0_2_0_1()); }
		ruleCanOnlyRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeCanOnlyRuleTypeParserRuleCall_0_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeCardinalityRuleTypeParserRuleCall_0_2_0_2()); }
		ruleCardinalityRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeCardinalityRuleTypeParserRuleCall_0_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeSubConceptRuleTypeParserRuleCall_0_2_0_3()); }
		ruleSubConceptRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeSubConceptRuleTypeParserRuleCall_0_2_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__RuletypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeOnlyCanRuleTypeParserRuleCall_1_0_0()); }
		ruleOnlyCanRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeOnlyCanRuleTypeParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeConditionalRuleTypeParserRuleCall_1_0_1()); }
		ruleConditionalRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeConditionalRuleTypeParserRuleCall_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeNegationRuleTypeParserRuleCall_1_0_2()); }
		ruleNegationRuleType
		{ after(grammarAccess.getSentenceAccess().getRuletypeNegationRuleTypeParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationRuleTypeAccess().getNothingParserRuleCall_0()); }
		ruleNothing
		{ after(grammarAccess.getNegationRuleTypeAccess().getNothingParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNegationRuleTypeAccess().getGroup_1()); }
		(rule__NegationRuleType__Group_1__0)
		{ after(grammarAccess.getNegationRuleTypeAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getAnythingAssignment_0()); }
		(rule__Object__AnythingAssignment_0)
		{ after(grammarAccess.getObjectAccess().getAnythingAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getGroup_1()); }
		(rule__Object__Group_1__0)
		{ after(grammarAccess.getObjectAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectAndListAssignment_1_1_0()); }
		(rule__Object__ObjectAndListAssignment_1_1_0)
		{ after(grammarAccess.getObjectAccess().getObjectAndListAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAccess().getObjectOrListAssignment_1_1_1()); }
		(rule__Object__ObjectOrListAssignment_1_1_1)
		{ after(grammarAccess.getObjectAccess().getObjectOrListAssignment_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getGroup_0()); }
		(rule__ObjectConceptExpression__Group_0__0)
		{ after(grammarAccess.getObjectConceptExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getGroup_1()); }
		(rule__ObjectConceptExpression__Group_1__0)
		{ after(grammarAccess.getObjectConceptExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__CardinalityAlternatives_0_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtMostKeyword_0_1_0_0_0()); }
		'at-most'
		{ after(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtMostKeyword_0_1_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtLeastKeyword_0_1_0_0_1()); }
		'at-least'
		{ after(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtLeastKeyword_0_1_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getCardinalityExactlyKeyword_0_1_0_0_2()); }
		'exactly'
		{ after(grammarAccess.getObjectConceptExpressionAccess().getCardinalityExactlyKeyword_0_1_0_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getObjectRelationParserRuleCall_0()); }
		ruleObjectRelation
		{ after(grammarAccess.getRelationAccess().getObjectRelationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationAccess().getDatatypeRelationParserRuleCall_1()); }
		ruleDatatypeRelation
		{ after(grammarAccess.getRelationAccess().getDatatypeRelationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptExpressionAccess().getAKeyword_0_0()); }
		'a'
		{ after(grammarAccess.getConceptExpressionAccess().getAKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConceptExpressionAccess().getAnKeyword_0_1()); }
		'an'
		{ after(grammarAccess.getConceptExpressionAccess().getAnKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_0()); }
		(rule__StatementList__ExpressionAssignment_1_1_0)
		{ after(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_1()); }
		(rule__StatementList__ExpressionAssignment_1_1_1)
		{ after(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_2()); }
		(rule__StatementList__ExpressionAssignment_1_1_2)
		{ after(grammarAccess.getStatementListAccess().getExpressionAssignment_1_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataStatementAccess().getStringValueAssignment_0()); }
		(rule__DataStatement__StringValueAssignment_0)
		{ after(grammarAccess.getDataStatementAccess().getStringValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataStatementAccess().getIntValueAssignment_1()); }
		(rule__DataStatement__IntValueAssignment_1)
		{ after(grammarAccess.getDataStatementAccess().getIntValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_0()); }
		(rule__FactStatement__AssertionAssignment_0_0)
		{ after(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_1()); }
		(rule__FactStatement__AssertionAssignment_0_1)
		{ after(grammarAccess.getFactStatementAccess().getAssertionAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAssertionAccess().getAKeyword_2_0()); }
		'a'
		{ after(grammarAccess.getConceptAssertionAccess().getAKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getConceptAssertionAccess().getAnKeyword_2_1()); }
		'an'
		{ after(grammarAccess.getConceptAssertionAccess().getAnKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoleAssertion__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRoleAssertionAccess().getObjectPropertyAssertionParserRuleCall_0()); }
		ruleObjectPropertyAssertion
		{ after(grammarAccess.getRoleAssertionAccess().getObjectPropertyAssertionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getRoleAssertionAccess().getGroup_1()); }
		(rule__RoleAssertion__Group_1__0)
		{ after(grammarAccess.getRoleAssertionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getStringAssignment_2_0()); }
		(rule__DatatypePropertyAssertion__StringAssignment_2_0)
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getStringAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getIntAssignment_2_1()); }
		(rule__DatatypePropertyAssertion__IntAssignment_2_1)
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getIntAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getAKeyword_2_0()); }
		'a'
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getAKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getAnKeyword_2_1()); }
		'an'
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getAnKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sentence__Group_0__0__Impl
	rule__Sentence__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSentenceAccess().getEveryKeyword_0_0()); }
	'Every'
	{ after(grammarAccess.getSentenceAccess().getEveryKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sentence__Group_0__1__Impl
	rule__Sentence__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSentenceAccess().getSubjectAssignment_0_1()); }
	(rule__Sentence__SubjectAssignment_0_1)
	{ after(grammarAccess.getSentenceAccess().getSubjectAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sentence__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSentenceAccess().getRuletypeAssignment_0_2()); }
	(rule__Sentence__RuletypeAssignment_0_2)
	{ after(grammarAccess.getSentenceAccess().getRuletypeAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegationRuleType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1__0__Impl
	rule__NegationRuleType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getGroup_1_0()); }
	(rule__NegationRuleType__Group_1_0__0)
	{ after(grammarAccess.getNegationRuleTypeAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getNegationRuleTypeAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NegationRuleType__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1_0__0__Impl
	rule__NegationRuleType__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getNoKeyword_1_0_0()); }
	'No'
	{ after(grammarAccess.getNegationRuleTypeAccess().getNoKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1_0__1__Impl
	rule__NegationRuleType__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getSubjectAssignment_1_0_1()); }
	(rule__NegationRuleType__SubjectAssignment_1_0_1)
	{ after(grammarAccess.getNegationRuleTypeAccess().getSubjectAssignment_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1_0__2__Impl
	rule__NegationRuleType__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getCanKeyword_1_0_2()); }
	'can'
	{ after(grammarAccess.getNegationRuleTypeAccess().getCanKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NegationRuleType__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNegationRuleTypeAccess().getObjectAssignment_1_0_3()); }
	(rule__NegationRuleType__ObjectAssignment_1_0_3)
	{ after(grammarAccess.getNegationRuleTypeAccess().getObjectAssignment_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anything__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anything__Group__0__Impl
	rule__Anything__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anything__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnythingAccess().getRelationAssignment_0()); }
	(rule__Anything__RelationAssignment_0)
	{ after(grammarAccess.getAnythingAccess().getRelationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anything__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anything__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anything__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnythingAccess().getAnythingKeyword_1()); }
	'anything'
	{ after(grammarAccess.getAnythingAccess().getAnythingKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nothing__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nothing__Group__0__Impl
	rule__Nothing__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNothingAccess().getNothingKeyword_0()); }
	'Nothing'
	{ after(grammarAccess.getNothingAccess().getNothingKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nothing__Group__1__Impl
	rule__Nothing__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNothingAccess().getCanKeyword_1()); }
	'can'
	{ after(grammarAccess.getNothingAccess().getCanKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nothing__Group__2__Impl
	rule__Nothing__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNothingAccess().getObjectAssignment_2()); }
	(rule__Nothing__ObjectAssignment_2)
	{ after(grammarAccess.getNothingAccess().getObjectAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nothing__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNothingAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getNothingAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__0__Impl
	rule__ConditionalRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getStartAssignment_0()); }
	(rule__ConditionalRuleType__StartAssignment_0)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__1__Impl
	rule__ConditionalRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getSubjectAssignment_1()); }
	(rule__ConditionalRuleType__SubjectAssignment_1)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getSubjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__2__Impl
	rule__ConditionalRuleType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getRelationAssignment_2()); }
	(rule__ConditionalRuleType__RelationAssignment_2)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getRelationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__3__Impl
	rule__ConditionalRuleType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getObjectAssignment_3()); }
	(rule__ConditionalRuleType__ObjectAssignment_3)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getObjectAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__4__Impl
	rule__ConditionalRuleType__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getCommaKeyword_4()); }
	','
	{ after(grammarAccess.getConditionalRuleTypeAccess().getCommaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__5__Impl
	rule__ConditionalRuleType__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getThenKeyword_5()); }
	'then'
	{ after(grammarAccess.getConditionalRuleTypeAccess().getThenKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__6__Impl
	rule__ConditionalRuleType__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getItKeyword_6()); }
	'it'
	{ after(grammarAccess.getConditionalRuleTypeAccess().getItKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__7__Impl
	rule__ConditionalRuleType__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getMustKeyword_7()); }
	'must'
	{ after(grammarAccess.getConditionalRuleTypeAccess().getMustKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__8__Impl
	rule__ConditionalRuleType__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getRelation2Assignment_8()); }
	(rule__ConditionalRuleType__Relation2Assignment_8)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getRelation2Assignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__9__Impl
	rule__ConditionalRuleType__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getThisKeyword_9()); }
	'this'
	{ after(grammarAccess.getConditionalRuleTypeAccess().getThisKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__10__Impl
	rule__ConditionalRuleType__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getObject2Assignment_10()); }
	(rule__ConditionalRuleType__Object2Assignment_10)
	{ after(grammarAccess.getConditionalRuleTypeAccess().getObject2Assignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalRuleType__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalRuleTypeAccess().getFullStopKeyword_11()); }
	'.'
	{ after(grammarAccess.getConditionalRuleTypeAccess().getFullStopKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OnlyCanRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnlyCanRuleType__Group__0__Impl
	rule__OnlyCanRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnlyCanRuleTypeAccess().getStartAssignment_0()); }
	(rule__OnlyCanRuleType__StartAssignment_0)
	{ after(grammarAccess.getOnlyCanRuleTypeAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnlyCanRuleType__Group__1__Impl
	rule__OnlyCanRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectAssignment_1()); }
	(rule__OnlyCanRuleType__SubjectAssignment_1)
	{ after(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnlyCanRuleType__Group__2__Impl
	rule__OnlyCanRuleType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnlyCanRuleTypeAccess().getCanKeyword_2()); }
	'can'
	{ after(grammarAccess.getOnlyCanRuleTypeAccess().getCanKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnlyCanRuleType__Group__3__Impl
	rule__OnlyCanRuleType__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnlyCanRuleTypeAccess().getObjectAssignment_3()); }
	(rule__OnlyCanRuleType__ObjectAssignment_3)
	{ after(grammarAccess.getOnlyCanRuleTypeAccess().getObjectAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OnlyCanRuleType__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOnlyCanRuleTypeAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getOnlyCanRuleTypeAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubConceptRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubConceptRuleType__Group__0__Impl
	rule__SubConceptRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubConceptRuleTypeAccess().getModifierAssignment_0()); }
	(rule__SubConceptRuleType__ModifierAssignment_0)
	{ after(grammarAccess.getSubConceptRuleTypeAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubConceptRuleType__Group__1__Impl
	rule__SubConceptRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubConceptRuleTypeAccess().getBeKeyword_1()); }
	'be'
	{ after(grammarAccess.getSubConceptRuleTypeAccess().getBeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubConceptRuleType__Group__2__Impl
	rule__SubConceptRuleType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubConceptRuleTypeAccess().getObjectAssignment_2()); }
	(rule__SubConceptRuleType__ObjectAssignment_2)
	{ after(grammarAccess.getSubConceptRuleTypeAccess().getObjectAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubConceptRuleType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubConceptRuleTypeAccess().getFullStopKeyword_3()); }
	'.'
	{ after(grammarAccess.getSubConceptRuleTypeAccess().getFullStopKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MustRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MustRuleType__Group__0__Impl
	rule__MustRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustRuleTypeAccess().getModifierAssignment_0()); }
	(rule__MustRuleType__ModifierAssignment_0)
	{ after(grammarAccess.getMustRuleTypeAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MustRuleType__Group__1__Impl
	rule__MustRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustRuleTypeAccess().getObjectAssignment_1()); }
	(rule__MustRuleType__ObjectAssignment_1)
	{ after(grammarAccess.getMustRuleTypeAccess().getObjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MustRuleType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMustRuleTypeAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getMustRuleTypeAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Object__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_1__0__Impl
	rule__Object__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getExpressionAssignment_1_0()); }
	(rule__Object__ExpressionAssignment_1_0)
	{ after(grammarAccess.getObjectAccess().getExpressionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Object__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAccess().getAlternatives_1_1()); }
	(rule__Object__Alternatives_1_1)*
	{ after(grammarAccess.getObjectAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CanOnlyRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CanOnlyRuleType__Group__0__Impl
	rule__CanOnlyRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCanOnlyRuleTypeAccess().getModifierAssignment_0()); }
	(rule__CanOnlyRuleType__ModifierAssignment_0)
	{ after(grammarAccess.getCanOnlyRuleTypeAccess().getModifierAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CanOnlyRuleType__Group__1__Impl
	rule__CanOnlyRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCanOnlyRuleTypeAccess().getObjectAssignment_1()); }
	(rule__CanOnlyRuleType__ObjectAssignment_1)
	{ after(grammarAccess.getCanOnlyRuleTypeAccess().getObjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CanOnlyRuleType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCanOnlyRuleTypeAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getCanOnlyRuleTypeAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CardinalityRuleType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CardinalityRuleType__Group__0__Impl
	rule__CardinalityRuleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityRuleTypeAccess().getModiferAssignment_0()); }
	(rule__CardinalityRuleType__ModiferAssignment_0)
	{ after(grammarAccess.getCardinalityRuleTypeAccess().getModiferAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CardinalityRuleType__Group__1__Impl
	rule__CardinalityRuleType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityRuleTypeAccess().getObjectAssignment_1()); }
	(rule__CardinalityRuleType__ObjectAssignment_1)
	{ after(grammarAccess.getCardinalityRuleTypeAccess().getObjectAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CardinalityRuleType__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCardinalityRuleTypeAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getCardinalityRuleTypeAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectConceptExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_0__0__Impl
	rule__ObjectConceptExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_0_0()); }
	(rule__ObjectConceptExpression__RelationAssignment_0_0)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_0__1__Impl
	rule__ObjectConceptExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getGroup_0_1()); }
	(rule__ObjectConceptExpression__Group_0_1__0)?
	{ after(grammarAccess.getObjectConceptExpressionAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getConceptAssignment_0_2()); }
	(rule__ObjectConceptExpression__ConceptAssignment_0_2)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getConceptAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectConceptExpression__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_0_1__0__Impl
	rule__ObjectConceptExpression__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAssignment_0_1_0()); }
	(rule__ObjectConceptExpression__CardinalityAssignment_0_1_0)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getNumberAssignment_0_1_1()); }
	(rule__ObjectConceptExpression__NumberAssignment_0_1_1)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getNumberAssignment_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectConceptExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_1__0__Impl
	rule__ObjectConceptExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_1_0()); }
	(rule__ObjectConceptExpression__RelationAssignment_1_0)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getRelationAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectConceptExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectConceptExpressionAccess().getDataAssignment_1_1()); }
	(rule__ObjectConceptExpression__DataAssignment_1_1)
	{ after(grammarAccess.getObjectConceptExpressionAccess().getDataAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndObjectConceptExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndObjectConceptExpression__Group__0__Impl
	rule__AndObjectConceptExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndObjectConceptExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndObjectConceptExpressionAccess().getAndKeyword_0()); }
	'and'
	{ after(grammarAccess.getAndObjectConceptExpressionAccess().getAndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndObjectConceptExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndObjectConceptExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndObjectConceptExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionAssignment_1()); }
	(rule__AndObjectConceptExpression__ExpressionAssignment_1)
	{ after(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrObjectConceptExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrObjectConceptExpression__Group__0__Impl
	rule__OrObjectConceptExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrObjectConceptExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrObjectConceptExpressionAccess().getOrKeyword_0()); }
	'or'
	{ after(grammarAccess.getOrObjectConceptExpressionAccess().getOrKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrObjectConceptExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrObjectConceptExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrObjectConceptExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionAssignment_1()); }
	(rule__OrObjectConceptExpression__ExpressionAssignment_1)
	{ after(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypeRelation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeRelation__Group__0__Impl
	rule__DatatypeRelation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeRelation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeRelationAccess().getRelationNameAssignment_0()); }
	(rule__DatatypeRelation__RelationNameAssignment_0)
	{ after(grammarAccess.getDatatypeRelationAccess().getRelationNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeRelation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypeRelation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeRelation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypeRelationAccess().getEqualToKeyword_1()); }
	'equal-to'
	{ after(grammarAccess.getDatatypeRelationAccess().getEqualToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConceptExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptExpression__Group__0__Impl
	rule__ConceptExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptExpressionAccess().getAlternatives_0()); }
	(rule__ConceptExpression__Alternatives_0)?
	{ after(grammarAccess.getConceptExpressionAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptExpression__Group__1__Impl
	rule__ConceptExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptExpressionAccess().getConceptAssignment_1()); }
	(rule__ConceptExpression__ConceptAssignment_1)
	{ after(grammarAccess.getConceptExpressionAccess().getConceptAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptExpressionAccess().getThatAssignment_2()); }
	(rule__ConceptExpression__ThatAssignment_2)*
	{ after(grammarAccess.getConceptExpressionAccess().getThatAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ThatExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThatExpression__Group__0__Impl
	rule__ThatExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThatExpressionAccess().getThatKeyword_0()); }
	'that'
	{ after(grammarAccess.getThatExpressionAccess().getThatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThatExpression__Group__1__Impl
	rule__ThatExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThatExpressionAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getThatExpressionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThatExpression__Group__2__Impl
	rule__ThatExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getThatExpressionAccess().getListAssignment_2()); }
		(rule__ThatExpression__ListAssignment_2)
		{ after(grammarAccess.getThatExpressionAccess().getListAssignment_2()); }
	)
	(
		{ before(grammarAccess.getThatExpressionAccess().getListAssignment_2()); }
		(rule__ThatExpression__ListAssignment_2)*
		{ after(grammarAccess.getThatExpressionAccess().getListAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ThatExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getThatExpressionAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getThatExpressionAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__0__Impl
	rule__StatementList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getAndKeyword_0()); }
	('and')?
	{ after(grammarAccess.getStatementListAccess().getAndKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getGroup_1()); }
	(rule__StatementList__Group_1__0)
	{ after(grammarAccess.getStatementListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group_1__0__Impl
	rule__StatementList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getRelationAssignment_1_0()); }
	(rule__StatementList__RelationAssignment_1_0)
	{ after(grammarAccess.getStatementListAccess().getRelationAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementListAccess().getAlternatives_1_1()); }
	(rule__StatementList__Alternatives_1_1)
	{ after(grammarAccess.getStatementListAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableStatement__Group__0__Impl
	rule__VariableStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableStatementAccess().getConceptAssignment_0()); }
	(rule__VariableStatement__ConceptAssignment_0)
	{ after(grammarAccess.getVariableStatementAccess().getConceptAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableStatementAccess().getVariableAssignment_1()); }
	(rule__VariableStatement__VariableAssignment_1)
	{ after(grammarAccess.getVariableStatementAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FactStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FactStatement__Group__0__Impl
	rule__FactStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactStatementAccess().getAlternatives_0()); }
	(rule__FactStatement__Alternatives_0)
	{ after(grammarAccess.getFactStatementAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FactStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactStatementAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getFactStatementAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConceptAssertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptAssertion__Group__0__Impl
	rule__ConceptAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAssertionAccess().getIndividualAssignment_0()); }
	(rule__ConceptAssertion__IndividualAssignment_0)
	{ after(grammarAccess.getConceptAssertionAccess().getIndividualAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptAssertion__Group__1__Impl
	rule__ConceptAssertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAssertionAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getConceptAssertionAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptAssertion__Group__2__Impl
	rule__ConceptAssertion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAssertionAccess().getAlternatives_2()); }
	(rule__ConceptAssertion__Alternatives_2)
	{ after(grammarAccess.getConceptAssertionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptAssertion__Group__3__Impl
	rule__ConceptAssertion__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAssertionAccess().getConceptAssignment_3()); }
	(rule__ConceptAssertion__ConceptAssignment_3)
	{ after(grammarAccess.getConceptAssertionAccess().getConceptAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConceptAssertion__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAssertionAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getConceptAssertionAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RoleAssertion__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoleAssertion__Group_1__0__Impl
	rule__RoleAssertion__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RoleAssertion__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAssertionAccess().getDatatypePropertyAssertionParserRuleCall_1_0()); }
	ruleDatatypePropertyAssertion
	{ after(grammarAccess.getRoleAssertionAccess().getDatatypePropertyAssertionParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RoleAssertion__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RoleAssertion__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RoleAssertion__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRoleAssertionAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getRoleAssertionAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DatatypePropertyAssertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypePropertyAssertion__Group__0__Impl
	rule__DatatypePropertyAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypePropertyAssertionAccess().getIndividualAssignment_0()); }
	(rule__DatatypePropertyAssertion__IndividualAssignment_0)
	{ after(grammarAccess.getDatatypePropertyAssertionAccess().getIndividualAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypePropertyAssertion__Group__1__Impl
	rule__DatatypePropertyAssertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypePropertyAssertionAccess().getRelationAssignment_1()); }
	(rule__DatatypePropertyAssertion__RelationAssignment_1)
	{ after(grammarAccess.getDatatypePropertyAssertionAccess().getRelationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DatatypePropertyAssertion__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatatypePropertyAssertionAccess().getAlternatives_2()); }
	(rule__DatatypePropertyAssertion__Alternatives_2)
	{ after(grammarAccess.getDatatypePropertyAssertionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectPropertyAssertion__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectPropertyAssertion__Group__0__Impl
	rule__ObjectPropertyAssertion__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectPropertyAssertionAccess().getIndividualAssignment_0()); }
	(rule__ObjectPropertyAssertion__IndividualAssignment_0)
	{ after(grammarAccess.getObjectPropertyAssertionAccess().getIndividualAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectPropertyAssertion__Group__1__Impl
	rule__ObjectPropertyAssertion__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectPropertyAssertionAccess().getRelationAssignment_1()); }
	(rule__ObjectPropertyAssertion__RelationAssignment_1)
	{ after(grammarAccess.getObjectPropertyAssertionAccess().getRelationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectPropertyAssertion__Group__2__Impl
	rule__ObjectPropertyAssertion__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectPropertyAssertionAccess().getAlternatives_2()); }
	(rule__ObjectPropertyAssertion__Alternatives_2)
	{ after(grammarAccess.getObjectPropertyAssertionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectPropertyAssertion__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectPropertyAssertionAccess().getConceptAssignment_3()); }
	(rule__ObjectPropertyAssertion__ConceptAssignment_3)
	{ after(grammarAccess.getObjectPropertyAssertionAccess().getConceptAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__SentenceAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSentenceSentenceParserRuleCall_0()); }
		ruleSentence
		{ after(grammarAccess.getModelAccess().getSentenceSentenceParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__SubjectAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getSubjectConceptExpressionParserRuleCall_0_1_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getSentenceAccess().getSubjectConceptExpressionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__RuletypeAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeAlternatives_0_2_0()); }
		(rule__Sentence__RuletypeAlternatives_0_2_0)
		{ after(grammarAccess.getSentenceAccess().getRuletypeAlternatives_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__RuletypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getRuletypeAlternatives_1_0()); }
		(rule__Sentence__RuletypeAlternatives_1_0)
		{ after(grammarAccess.getSentenceAccess().getRuletypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__FactsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getFactsFactStatementParserRuleCall_2_0()); }
		ruleFactStatement
		{ after(grammarAccess.getSentenceAccess().getFactsFactStatementParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__SubjectAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0_1_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getNegationRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NegationRuleType__ObjectAssignment_1_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNegationRuleTypeAccess().getObjectObjectParserRuleCall_1_0_3_0()); }
		ruleObject
		{ after(grammarAccess.getNegationRuleTypeAccess().getObjectObjectParserRuleCall_1_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anything__RelationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnythingAccess().getRelationRelationParserRuleCall_0_0()); }
		ruleRelation
		{ after(grammarAccess.getAnythingAccess().getRelationRelationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nothing__ObjectAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNothingAccess().getObjectObjectParserRuleCall_2_0()); }
		ruleObject
		{ after(grammarAccess.getNothingAccess().getObjectObjectParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getStartIfKeyword_0_0()); }
		(
			{ before(grammarAccess.getConditionalRuleTypeAccess().getStartIfKeyword_0_0()); }
			'If'
			{ after(grammarAccess.getConditionalRuleTypeAccess().getStartIfKeyword_0_0()); }
		)
		{ after(grammarAccess.getConditionalRuleTypeAccess().getStartIfKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__SubjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getConditionalRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__RelationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getRelationRelationParserRuleCall_2_0()); }
		ruleRelation
		{ after(grammarAccess.getConditionalRuleTypeAccess().getRelationRelationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__ObjectAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getObjectConceptExpressionParserRuleCall_3_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getConditionalRuleTypeAccess().getObjectConceptExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Relation2Assignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getRelation2RelationParserRuleCall_8_0()); }
		ruleRelation
		{ after(grammarAccess.getConditionalRuleTypeAccess().getRelation2RelationParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalRuleType__Object2Assignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalRuleTypeAccess().getObject2ConceptExpressionParserRuleCall_10_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getConditionalRuleTypeAccess().getObject2ConceptExpressionParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnlyCanRuleTypeAccess().getStartOnlyKeyword_0_0()); }
		(
			{ before(grammarAccess.getOnlyCanRuleTypeAccess().getStartOnlyKeyword_0_0()); }
			'Only'
			{ after(grammarAccess.getOnlyCanRuleTypeAccess().getStartOnlyKeyword_0_0()); }
		)
		{ after(grammarAccess.getOnlyCanRuleTypeAccess().getStartOnlyKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__SubjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OnlyCanRuleType__ObjectAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOnlyCanRuleTypeAccess().getObjectObjectParserRuleCall_3_0()); }
		ruleObject
		{ after(grammarAccess.getOnlyCanRuleTypeAccess().getObjectObjectParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubConceptRuleTypeAccess().getModifierMustKeyword_0_0()); }
		(
			{ before(grammarAccess.getSubConceptRuleTypeAccess().getModifierMustKeyword_0_0()); }
			'must'
			{ after(grammarAccess.getSubConceptRuleTypeAccess().getModifierMustKeyword_0_0()); }
		)
		{ after(grammarAccess.getSubConceptRuleTypeAccess().getModifierMustKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubConceptRuleType__ObjectAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubConceptRuleTypeAccess().getObjectConceptExpressionParserRuleCall_2_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getSubConceptRuleTypeAccess().getObjectConceptExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMustRuleTypeAccess().getModifierMustKeyword_0_0()); }
		(
			{ before(grammarAccess.getMustRuleTypeAccess().getModifierMustKeyword_0_0()); }
			'must'
			{ after(grammarAccess.getMustRuleTypeAccess().getModifierMustKeyword_0_0()); }
		)
		{ after(grammarAccess.getMustRuleTypeAccess().getModifierMustKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MustRuleType__ObjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMustRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getMustRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__AnythingAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getAnythingAnythingParserRuleCall_0_0()); }
		ruleAnything
		{ after(grammarAccess.getObjectAccess().getAnythingAnythingParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ExpressionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0_0()); }
		ruleObjectConceptExpression
		{ after(grammarAccess.getObjectAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjectAndListAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectAndListAndObjectConceptExpressionParserRuleCall_1_1_0_0()); }
		ruleAndObjectConceptExpression
		{ after(grammarAccess.getObjectAccess().getObjectAndListAndObjectConceptExpressionParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Object__ObjectOrListAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAccess().getObjectOrListOrObjectConceptExpressionParserRuleCall_1_1_1_0()); }
		ruleOrObjectConceptExpression
		{ after(grammarAccess.getObjectAccess().getObjectOrListOrObjectConceptExpressionParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__ModifierAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCanOnlyRuleTypeAccess().getModifierCanOnlyKeyword_0_0()); }
		(
			{ before(grammarAccess.getCanOnlyRuleTypeAccess().getModifierCanOnlyKeyword_0_0()); }
			'can-only'
			{ after(grammarAccess.getCanOnlyRuleTypeAccess().getModifierCanOnlyKeyword_0_0()); }
		)
		{ after(grammarAccess.getCanOnlyRuleTypeAccess().getModifierCanOnlyKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CanOnlyRuleType__ObjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCanOnlyRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getCanOnlyRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__ModiferAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityRuleTypeAccess().getModiferCanKeyword_0_0()); }
		(
			{ before(grammarAccess.getCardinalityRuleTypeAccess().getModiferCanKeyword_0_0()); }
			'can'
			{ after(grammarAccess.getCardinalityRuleTypeAccess().getModiferCanKeyword_0_0()); }
		)
		{ after(grammarAccess.getCardinalityRuleTypeAccess().getModiferCanKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CardinalityRuleType__ObjectAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCardinalityRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
		ruleObject
		{ after(grammarAccess.getCardinalityRuleTypeAccess().getObjectObjectParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__RelationAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getRelationRelationParserRuleCall_0_0_0()); }
		ruleRelation
		{ after(grammarAccess.getObjectConceptExpressionAccess().getRelationRelationParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__CardinalityAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAlternatives_0_1_0_0()); }
		(rule__ObjectConceptExpression__CardinalityAlternatives_0_1_0_0)
		{ after(grammarAccess.getObjectConceptExpressionAccess().getCardinalityAlternatives_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__NumberAssignment_0_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getNumberINTTerminalRuleCall_0_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getObjectConceptExpressionAccess().getNumberINTTerminalRuleCall_0_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__ConceptAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getConceptConceptExpressionParserRuleCall_0_2_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getObjectConceptExpressionAccess().getConceptConceptExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__RelationAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getRelationDatatypeRelationParserRuleCall_1_0_0()); }
		ruleDatatypeRelation
		{ after(grammarAccess.getObjectConceptExpressionAccess().getRelationDatatypeRelationParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectConceptExpression__DataAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectConceptExpressionAccess().getDataDataStatementParserRuleCall_1_1_0()); }
		ruleDataStatement
		{ after(grammarAccess.getObjectConceptExpressionAccess().getDataDataStatementParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndObjectConceptExpression__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0()); }
		ruleObjectConceptExpression
		{ after(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrObjectConceptExpression__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0()); }
		ruleObjectConceptExpression
		{ after(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypeRelation__RelationNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypeRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0_0()); }
		RULE_RELATION_NAME
		{ after(grammarAccess.getDatatypeRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectRelation__RelationNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0()); }
		RULE_RELATION_NAME
		{ after(grammarAccess.getObjectRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__ConceptAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptExpressionAccess().getConceptConceptParserRuleCall_1_0()); }
		ruleConcept
		{ after(grammarAccess.getConceptExpressionAccess().getConceptConceptParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptExpression__ThatAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptExpressionAccess().getThatThatExpressionParserRuleCall_2_0()); }
		ruleThatExpression
		{ after(grammarAccess.getConceptExpressionAccess().getThatThatExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ThatExpression__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getThatExpressionAccess().getListStatementListParserRuleCall_2_0()); }
		ruleStatementList
		{ after(grammarAccess.getThatExpressionAccess().getListStatementListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__RelationAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getRelationRelationParserRuleCall_1_0_0()); }
		ruleRelation
		{ after(grammarAccess.getStatementListAccess().getRelationRelationParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__ExpressionAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionConceptExpressionParserRuleCall_1_1_0_0()); }
		ruleConceptExpression
		{ after(grammarAccess.getStatementListAccess().getExpressionConceptExpressionParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__ExpressionAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionDataStatementParserRuleCall_1_1_1_0()); }
		ruleDataStatement
		{ after(grammarAccess.getStatementListAccess().getExpressionDataStatementParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementList__ExpressionAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementListAccess().getExpressionVariableStatementParserRuleCall_1_1_2_0()); }
		ruleVariableStatement
		{ after(grammarAccess.getStatementListAccess().getExpressionVariableStatementParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__ConceptAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableStatementAccess().getConceptConceptParserRuleCall_0_0()); }
		ruleConcept
		{ after(grammarAccess.getVariableStatementAccess().getConceptConceptParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableStatement__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableStatementAccess().getVariableVariableParserRuleCall_1_0()); }
		ruleVariable
		{ after(grammarAccess.getVariableStatementAccess().getVariableVariableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStatement__StringValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataStatementAccess().getStringValueSTRINGTerminalRuleCall_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getDataStatementAccess().getStringValueSTRINGTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataStatement__IntValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataStatementAccess().getIntValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getDataStatementAccess().getIntValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__AssertionAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactStatementAccess().getAssertionConceptAssertionParserRuleCall_0_0_0()); }
		ruleConceptAssertion
		{ after(grammarAccess.getFactStatementAccess().getAssertionConceptAssertionParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FactStatement__AssertionAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactStatementAccess().getAssertionRoleAssertionParserRuleCall_0_1_0()); }
		ruleRoleAssertion
		{ after(grammarAccess.getFactStatementAccess().getAssertionRoleAssertionParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__IndividualAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getConceptAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConceptAssertion__ConceptAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAssertionAccess().getConceptConceptParserRuleCall_3_0()); }
		ruleConcept
		{ after(grammarAccess.getConceptAssertionAccess().getConceptConceptParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__IndividualAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__RelationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getRelationDatatypeRelationParserRuleCall_1_0()); }
		ruleDatatypeRelation
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getRelationDatatypeRelationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__StringAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getStringSTRINGTerminalRuleCall_2_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getStringSTRINGTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DatatypePropertyAssertion__IntAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatatypePropertyAssertionAccess().getIntINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getDatatypePropertyAssertionAccess().getIntINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__IndividualAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
		RULE_NAME
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__RelationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getRelationRelationParserRuleCall_1_0()); }
		ruleRelation
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getRelationRelationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectPropertyAssertion__ConceptAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectPropertyAssertionAccess().getConceptConceptParserRuleCall_3_0()); }
		ruleConcept
		{ after(grammarAccess.getObjectPropertyAssertionAccess().getConceptConceptParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__ConceptNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getConceptNameNAMETerminalRuleCall_0()); }
		RULE_NAME
		{ after(grammarAccess.getConceptAccess().getConceptNameNAMETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameVARIABLE_NAMETerminalRuleCall_0()); }
		RULE_VARIABLE_NAME
		{ after(grammarAccess.getVariableAccess().getNameVARIABLE_NAMETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_RELATION_NAME : 'a'..'z' ('A'..'Z'|'a'..'z')+;

RULE_NAME : 'A'..'Z' ('A'..'Z'|'a'..'z')+;

RULE_VARIABLE_NAME : 'A'..'Z';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
