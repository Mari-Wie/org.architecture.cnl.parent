/*
 * generated by Xtext 2.22.0
 */
grammar InternalArchcnl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.architecture.cnl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.architecture.cnl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.architecture.cnl.services.ArchcnlGrammarAccess;

}

@parser::members {

 	private ArchcnlGrammarAccess grammarAccess;

    public InternalArchcnlParser(TokenStream input, ArchcnlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected ArchcnlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSentenceSentenceParserRuleCall_0());
			}
			lv_sentence_0_0=ruleSentence
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"sentence",
					lv_sentence_0_0,
					"org.architecture.cnl.Archcnl.Sentence");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current; }
	EOF;

// Rule Sentence
ruleSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Every'
			{
				newLeafNode(otherlv_0, grammarAccess.getSentenceAccess().getEveryKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceAccess().getSubjectConceptExpressionParserRuleCall_0_1_0());
					}
					lv_subject_1_0=ruleConceptExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceRule());
						}
						set(
							$current,
							"subject",
							lv_subject_1_0,
							"org.architecture.cnl.Archcnl.ConceptExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeMustRuleTypeParserRuleCall_0_2_0_0());
						}
						lv_ruletype_2_1=ruleMustRuleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSentenceRule());
							}
							set(
								$current,
								"ruletype",
								lv_ruletype_2_1,
								"org.architecture.cnl.Archcnl.MustRuleType");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeCanOnlyRuleTypeParserRuleCall_0_2_0_1());
						}
						lv_ruletype_2_2=ruleCanOnlyRuleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSentenceRule());
							}
							set(
								$current,
								"ruletype",
								lv_ruletype_2_2,
								"org.architecture.cnl.Archcnl.CanOnlyRuleType");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeCardinalityRuleTypeParserRuleCall_0_2_0_2());
						}
						lv_ruletype_2_3=ruleCardinalityRuleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSentenceRule());
							}
							set(
								$current,
								"ruletype",
								lv_ruletype_2_3,
								"org.architecture.cnl.Archcnl.CardinalityRuleType");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeSubConceptRuleTypeParserRuleCall_0_2_0_3());
						}
						lv_ruletype_2_4=ruleSubConceptRuleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSentenceRule());
							}
							set(
								$current,
								"ruletype",
								lv_ruletype_2_4,
								"org.architecture.cnl.Archcnl.SubConceptRuleType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeOnlyCanRuleTypeParserRuleCall_1_0_0());
					}
					lv_ruletype_3_1=ruleOnlyCanRuleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceRule());
						}
						set(
							$current,
							"ruletype",
							lv_ruletype_3_1,
							"org.architecture.cnl.Archcnl.OnlyCanRuleType");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeConditionalRuleTypeParserRuleCall_1_0_1());
					}
					lv_ruletype_3_2=ruleConditionalRuleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceRule());
						}
						set(
							$current,
							"ruletype",
							lv_ruletype_3_2,
							"org.architecture.cnl.Archcnl.ConditionalRuleType");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSentenceAccess().getRuletypeNegationRuleTypeParserRuleCall_1_0_2());
					}
					lv_ruletype_3_3=ruleNegationRuleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSentenceRule());
						}
						set(
							$current,
							"ruletype",
							lv_ruletype_3_3,
							"org.architecture.cnl.Archcnl.NegationRuleType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSentenceAccess().getFactsFactStatementParserRuleCall_2_0());
				}
				lv_facts_4_0=ruleFactStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSentenceRule());
					}
					add(
						$current,
						"facts",
						lv_facts_4_0,
						"org.architecture.cnl.Archcnl.FactStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNegationRuleType
entryRuleNegationRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationRuleTypeRule()); }
	iv_ruleNegationRuleType=ruleNegationRuleType
	{ $current=$iv_ruleNegationRuleType.current; }
	EOF;

// Rule NegationRuleType
ruleNegationRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNegationRuleTypeAccess().getNothingParserRuleCall_0());
		}
		this_Nothing_0=ruleNothing
		{
			$current = $this_Nothing_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				otherlv_1='No'
				{
					newLeafNode(otherlv_1, grammarAccess.getNegationRuleTypeAccess().getNoKeyword_1_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNegationRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0_1_0());
						}
						lv_subject_2_0=ruleConceptExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNegationRuleTypeRule());
							}
							set(
								$current,
								"subject",
								lv_subject_2_0,
								"org.architecture.cnl.Archcnl.ConceptExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3='can'
				{
					newLeafNode(otherlv_3, grammarAccess.getNegationRuleTypeAccess().getCanKeyword_1_0_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNegationRuleTypeAccess().getObjectObjectParserRuleCall_1_0_3_0());
						}
						lv_object_4_0=ruleObject
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNegationRuleTypeRule());
							}
							set(
								$current,
								"object",
								lv_object_4_0,
								"org.architecture.cnl.Archcnl.Object");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			otherlv_5='.'
			{
				newLeafNode(otherlv_5, grammarAccess.getNegationRuleTypeAccess().getFullStopKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleAnything
entryRuleAnything returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnythingRule()); }
	iv_ruleAnything=ruleAnything
	{ $current=$iv_ruleAnything.current; }
	EOF;

// Rule Anything
ruleAnything returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAnythingAccess().getRelationRelationParserRuleCall_0_0());
				}
				lv_relation_0_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnythingRule());
					}
					set(
						$current,
						"relation",
						lv_relation_0_0,
						"org.architecture.cnl.Archcnl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='anything'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnythingAccess().getAnythingKeyword_1());
		}
	)
;

// Entry rule entryRuleNothing
entryRuleNothing returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNothingRule()); }
	iv_ruleNothing=ruleNothing
	{ $current=$iv_ruleNothing.current; }
	EOF;

// Rule Nothing
ruleNothing returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Nothing'
		{
			newLeafNode(otherlv_0, grammarAccess.getNothingAccess().getNothingKeyword_0());
		}
		otherlv_1='can'
		{
			newLeafNode(otherlv_1, grammarAccess.getNothingAccess().getCanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNothingAccess().getObjectObjectParserRuleCall_2_0());
				}
				lv_object_2_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNothingRule());
					}
					set(
						$current,
						"object",
						lv_object_2_0,
						"org.architecture.cnl.Archcnl.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getNothingAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleConditionalRuleType
entryRuleConditionalRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionalRuleTypeRule()); }
	iv_ruleConditionalRuleType=ruleConditionalRuleType
	{ $current=$iv_ruleConditionalRuleType.current; }
	EOF;

// Rule ConditionalRuleType
ruleConditionalRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_start_0_0='If'
				{
					newLeafNode(lv_start_0_0, grammarAccess.getConditionalRuleTypeAccess().getStartIfKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionalRuleTypeRule());
					}
					setWithLastConsumed($current, "start", lv_start_0_0, "If");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0());
				}
				lv_subject_1_0=ruleConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRuleTypeRule());
					}
					set(
						$current,
						"subject",
						lv_subject_1_0,
						"org.architecture.cnl.Archcnl.ConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRuleTypeAccess().getRelationRelationParserRuleCall_2_0());
				}
				lv_relation_2_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRuleTypeRule());
					}
					set(
						$current,
						"relation",
						lv_relation_2_0,
						"org.architecture.cnl.Archcnl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRuleTypeAccess().getObjectConceptExpressionParserRuleCall_3_0());
				}
				lv_object_3_0=ruleConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_3_0,
						"org.architecture.cnl.Archcnl.ConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=','
		{
			newLeafNode(otherlv_4, grammarAccess.getConditionalRuleTypeAccess().getCommaKeyword_4());
		}
		otherlv_5='then'
		{
			newLeafNode(otherlv_5, grammarAccess.getConditionalRuleTypeAccess().getThenKeyword_5());
		}
		otherlv_6='it'
		{
			newLeafNode(otherlv_6, grammarAccess.getConditionalRuleTypeAccess().getItKeyword_6());
		}
		otherlv_7='must'
		{
			newLeafNode(otherlv_7, grammarAccess.getConditionalRuleTypeAccess().getMustKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRuleTypeAccess().getRelation2RelationParserRuleCall_8_0());
				}
				lv_relation2_8_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRuleTypeRule());
					}
					set(
						$current,
						"relation2",
						lv_relation2_8_0,
						"org.architecture.cnl.Archcnl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='this'
		{
			newLeafNode(otherlv_9, grammarAccess.getConditionalRuleTypeAccess().getThisKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionalRuleTypeAccess().getObject2ConceptExpressionParserRuleCall_10_0());
				}
				lv_object2_10_0=ruleConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionalRuleTypeRule());
					}
					set(
						$current,
						"object2",
						lv_object2_10_0,
						"org.architecture.cnl.Archcnl.ConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_11='.'
		{
			newLeafNode(otherlv_11, grammarAccess.getConditionalRuleTypeAccess().getFullStopKeyword_11());
		}
	)
;

// Entry rule entryRuleOnlyCanRuleType
entryRuleOnlyCanRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOnlyCanRuleTypeRule()); }
	iv_ruleOnlyCanRuleType=ruleOnlyCanRuleType
	{ $current=$iv_ruleOnlyCanRuleType.current; }
	EOF;

// Rule OnlyCanRuleType
ruleOnlyCanRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_start_0_0='Only'
				{
					newLeafNode(lv_start_0_0, grammarAccess.getOnlyCanRuleTypeAccess().getStartOnlyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOnlyCanRuleTypeRule());
					}
					setWithLastConsumed($current, "start", lv_start_0_0, "Only");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOnlyCanRuleTypeAccess().getSubjectConceptExpressionParserRuleCall_1_0());
				}
				lv_subject_1_0=ruleConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnlyCanRuleTypeRule());
					}
					set(
						$current,
						"subject",
						lv_subject_1_0,
						"org.architecture.cnl.Archcnl.ConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='can'
		{
			newLeafNode(otherlv_2, grammarAccess.getOnlyCanRuleTypeAccess().getCanKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOnlyCanRuleTypeAccess().getObjectObjectParserRuleCall_3_0());
				}
				lv_object_3_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOnlyCanRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_3_0,
						"org.architecture.cnl.Archcnl.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='.'
		{
			newLeafNode(otherlv_4, grammarAccess.getOnlyCanRuleTypeAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleSubConceptRuleType
entryRuleSubConceptRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubConceptRuleTypeRule()); }
	iv_ruleSubConceptRuleType=ruleSubConceptRuleType
	{ $current=$iv_ruleSubConceptRuleType.current; }
	EOF;

// Rule SubConceptRuleType
ruleSubConceptRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modifier_0_0='must'
				{
					newLeafNode(lv_modifier_0_0, grammarAccess.getSubConceptRuleTypeAccess().getModifierMustKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSubConceptRuleTypeRule());
					}
					setWithLastConsumed($current, "modifier", lv_modifier_0_0, "must");
				}
			)
		)
		otherlv_1='be'
		{
			newLeafNode(otherlv_1, grammarAccess.getSubConceptRuleTypeAccess().getBeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSubConceptRuleTypeAccess().getObjectConceptExpressionParserRuleCall_2_0());
				}
				lv_object_2_0=ruleConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubConceptRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_2_0,
						"org.architecture.cnl.Archcnl.ConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='.'
		{
			newLeafNode(otherlv_3, grammarAccess.getSubConceptRuleTypeAccess().getFullStopKeyword_3());
		}
	)
;

// Entry rule entryRuleMustRuleType
entryRuleMustRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMustRuleTypeRule()); }
	iv_ruleMustRuleType=ruleMustRuleType
	{ $current=$iv_ruleMustRuleType.current; }
	EOF;

// Rule MustRuleType
ruleMustRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modifier_0_0='must'
				{
					newLeafNode(lv_modifier_0_0, grammarAccess.getMustRuleTypeAccess().getModifierMustKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMustRuleTypeRule());
					}
					setWithLastConsumed($current, "modifier", lv_modifier_0_0, "must");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMustRuleTypeAccess().getObjectObjectParserRuleCall_1_0());
				}
				lv_object_1_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMustRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_1_0,
						"org.architecture.cnl.Archcnl.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getMustRuleTypeAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectAccess().getAnythingAnythingParserRuleCall_0_0());
				}
				lv_anything_0_0=ruleAnything
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectRule());
					}
					set(
						$current,
						"anything",
						lv_anything_0_0,
						"org.architecture.cnl.Archcnl.Anything");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleObjectConceptExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"org.architecture.cnl.Archcnl.ObjectConceptExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getObjectAccess().getObjectAndListAndObjectConceptExpressionParserRuleCall_1_1_0_0());
						}
						lv_objectAndList_2_0=ruleAndObjectConceptExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getObjectRule());
							}
							add(
								$current,
								"objectAndList",
								lv_objectAndList_2_0,
								"org.architecture.cnl.Archcnl.AndObjectConceptExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getObjectAccess().getObjectOrListOrObjectConceptExpressionParserRuleCall_1_1_1_0());
						}
						lv_objectOrList_3_0=ruleOrObjectConceptExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getObjectRule());
							}
							add(
								$current,
								"objectOrList",
								lv_objectOrList_3_0,
								"org.architecture.cnl.Archcnl.OrObjectConceptExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleCanOnlyRuleType
entryRuleCanOnlyRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCanOnlyRuleTypeRule()); }
	iv_ruleCanOnlyRuleType=ruleCanOnlyRuleType
	{ $current=$iv_ruleCanOnlyRuleType.current; }
	EOF;

// Rule CanOnlyRuleType
ruleCanOnlyRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modifier_0_0='can-only'
				{
					newLeafNode(lv_modifier_0_0, grammarAccess.getCanOnlyRuleTypeAccess().getModifierCanOnlyKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCanOnlyRuleTypeRule());
					}
					setWithLastConsumed($current, "modifier", lv_modifier_0_0, "can-only");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCanOnlyRuleTypeAccess().getObjectObjectParserRuleCall_1_0());
				}
				lv_object_1_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCanOnlyRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_1_0,
						"org.architecture.cnl.Archcnl.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getCanOnlyRuleTypeAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleCardinalityRuleType
entryRuleCardinalityRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCardinalityRuleTypeRule()); }
	iv_ruleCardinalityRuleType=ruleCardinalityRuleType
	{ $current=$iv_ruleCardinalityRuleType.current; }
	EOF;

// Rule CardinalityRuleType
ruleCardinalityRuleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modifer_0_0='can'
				{
					newLeafNode(lv_modifer_0_0, grammarAccess.getCardinalityRuleTypeAccess().getModiferCanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCardinalityRuleTypeRule());
					}
					setWithLastConsumed($current, "modifer", lv_modifer_0_0, "can");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCardinalityRuleTypeAccess().getObjectObjectParserRuleCall_1_0());
				}
				lv_object_1_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCardinalityRuleTypeRule());
					}
					set(
						$current,
						"object",
						lv_object_1_0,
						"org.architecture.cnl.Archcnl.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getCardinalityRuleTypeAccess().getFullStopKeyword_2());
		}
	)
;

// Entry rule entryRuleObjectConceptExpression
entryRuleObjectConceptExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectConceptExpressionRule()); }
	iv_ruleObjectConceptExpression=ruleObjectConceptExpression
	{ $current=$iv_ruleObjectConceptExpression.current; }
	EOF;

// Rule ObjectConceptExpression
ruleObjectConceptExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectConceptExpressionAccess().getRelationRelationParserRuleCall_0_0_0());
					}
					lv_relation_0_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectConceptExpressionRule());
						}
						set(
							$current,
							"relation",
							lv_relation_0_0,
							"org.architecture.cnl.Archcnl.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						(
							lv_cardinality_1_1='at-most'
							{
								newLeafNode(lv_cardinality_1_1, grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtMostKeyword_0_1_0_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectConceptExpressionRule());
								}
								setWithLastConsumed($current, "cardinality", lv_cardinality_1_1, null);
							}
							    |
							lv_cardinality_1_2='at-least'
							{
								newLeafNode(lv_cardinality_1_2, grammarAccess.getObjectConceptExpressionAccess().getCardinalityAtLeastKeyword_0_1_0_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectConceptExpressionRule());
								}
								setWithLastConsumed($current, "cardinality", lv_cardinality_1_2, null);
							}
							    |
							lv_cardinality_1_3='exactly'
							{
								newLeafNode(lv_cardinality_1_3, grammarAccess.getObjectConceptExpressionAccess().getCardinalityExactlyKeyword_0_1_0_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getObjectConceptExpressionRule());
								}
								setWithLastConsumed($current, "cardinality", lv_cardinality_1_3, null);
							}
						)
					)
				)
				(
					(
						lv_number_2_0=RULE_INT
						{
							newLeafNode(lv_number_2_0, grammarAccess.getObjectConceptExpressionAccess().getNumberINTTerminalRuleCall_0_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getObjectConceptExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"number",
								lv_number_2_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectConceptExpressionAccess().getConceptConceptExpressionParserRuleCall_0_2_0());
					}
					lv_concept_3_0=ruleConceptExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectConceptExpressionRule());
						}
						set(
							$current,
							"concept",
							lv_concept_3_0,
							"org.architecture.cnl.Archcnl.ConceptExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectConceptExpressionAccess().getRelationDatatypeRelationParserRuleCall_1_0_0());
					}
					lv_relation_4_0=ruleDatatypeRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectConceptExpressionRule());
						}
						set(
							$current,
							"relation",
							lv_relation_4_0,
							"org.architecture.cnl.Archcnl.DatatypeRelation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getObjectConceptExpressionAccess().getDataDataStatementParserRuleCall_1_1_0());
					}
					lv_data_5_0=ruleDataStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getObjectConceptExpressionRule());
						}
						set(
							$current,
							"data",
							lv_data_5_0,
							"org.architecture.cnl.Archcnl.DataStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleAndObjectConceptExpression
entryRuleAndObjectConceptExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndObjectConceptExpressionRule()); }
	iv_ruleAndObjectConceptExpression=ruleAndObjectConceptExpression
	{ $current=$iv_ruleAndObjectConceptExpression.current; }
	EOF;

// Rule AndObjectConceptExpression
ruleAndObjectConceptExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='and'
		{
			newLeafNode(otherlv_0, grammarAccess.getAndObjectConceptExpressionAccess().getAndKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAndObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleObjectConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAndObjectConceptExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.architecture.cnl.Archcnl.ObjectConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOrObjectConceptExpression
entryRuleOrObjectConceptExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrObjectConceptExpressionRule()); }
	iv_ruleOrObjectConceptExpression=ruleOrObjectConceptExpression
	{ $current=$iv_ruleOrObjectConceptExpression.current; }
	EOF;

// Rule OrObjectConceptExpression
ruleOrObjectConceptExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='or'
		{
			newLeafNode(otherlv_0, grammarAccess.getOrObjectConceptExpressionAccess().getOrKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOrObjectConceptExpressionAccess().getExpressionObjectConceptExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleObjectConceptExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOrObjectConceptExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.architecture.cnl.Archcnl.ObjectConceptExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	iv_ruleRelation=ruleRelation
	{ $current=$iv_ruleRelation.current; }
	EOF;

// Rule Relation
ruleRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationAccess().getObjectRelationParserRuleCall_0());
		}
		this_ObjectRelation_0=ruleObjectRelation
		{
			$current = $this_ObjectRelation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRelationAccess().getDatatypeRelationParserRuleCall_1());
		}
		this_DatatypeRelation_1=ruleDatatypeRelation
		{
			$current = $this_DatatypeRelation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDatatypeRelation
entryRuleDatatypeRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypeRelationRule()); }
	iv_ruleDatatypeRelation=ruleDatatypeRelation
	{ $current=$iv_ruleDatatypeRelation.current; }
	EOF;

// Rule DatatypeRelation
ruleDatatypeRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_relationName_0_0=RULE_RELATION_NAME
				{
					newLeafNode(lv_relationName_0_0, grammarAccess.getDatatypeRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatatypeRelationRule());
					}
					setWithLastConsumed(
						$current,
						"relationName",
						lv_relationName_0_0,
						"org.architecture.cnl.Archcnl.RELATION_NAME");
				}
			)
		)
		otherlv_1='equal-to'
		{
			newLeafNode(otherlv_1, grammarAccess.getDatatypeRelationAccess().getEqualToKeyword_1());
		}
	)
;

// Entry rule entryRuleObjectRelation
entryRuleObjectRelation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRelationRule()); }
	iv_ruleObjectRelation=ruleObjectRelation
	{ $current=$iv_ruleObjectRelation.current; }
	EOF;

// Rule ObjectRelation
ruleObjectRelation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_relationName_0_0=RULE_RELATION_NAME
			{
				newLeafNode(lv_relationName_0_0, grammarAccess.getObjectRelationAccess().getRelationNameRELATION_NAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getObjectRelationRule());
				}
				setWithLastConsumed(
					$current,
					"relationName",
					lv_relationName_0_0,
					"org.architecture.cnl.Archcnl.RELATION_NAME");
			}
		)
	)
;

// Entry rule entryRuleConceptExpression
entryRuleConceptExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptExpressionRule()); }
	iv_ruleConceptExpression=ruleConceptExpression
	{ $current=$iv_ruleConceptExpression.current; }
	EOF;

// Rule ConceptExpression
ruleConceptExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='a'
			{
				newLeafNode(otherlv_0, grammarAccess.getConceptExpressionAccess().getAKeyword_0_0());
			}
			    |
			otherlv_1='an'
			{
				newLeafNode(otherlv_1, grammarAccess.getConceptExpressionAccess().getAnKeyword_0_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptExpressionAccess().getConceptConceptParserRuleCall_1_0());
				}
				lv_concept_2_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptExpressionRule());
					}
					set(
						$current,
						"concept",
						lv_concept_2_0,
						"org.architecture.cnl.Archcnl.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptExpressionAccess().getThatThatExpressionParserRuleCall_2_0());
				}
				lv_that_3_0=ruleThatExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptExpressionRule());
					}
					add(
						$current,
						"that",
						lv_that_3_0,
						"org.architecture.cnl.Archcnl.ThatExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleThatExpression
entryRuleThatExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThatExpressionRule()); }
	iv_ruleThatExpression=ruleThatExpression
	{ $current=$iv_ruleThatExpression.current; }
	EOF;

// Rule ThatExpression
ruleThatExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='that'
		{
			newLeafNode(otherlv_0, grammarAccess.getThatExpressionAccess().getThatKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getThatExpressionAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getThatExpressionAccess().getListStatementListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleStatementList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getThatExpressionRule());
					}
					add(
						$current,
						"list",
						lv_list_2_0,
						"org.architecture.cnl.Archcnl.StatementList");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getThatExpressionAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current; }
	EOF;

// Rule StatementList
ruleStatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='and'
			{
				newLeafNode(otherlv_0, grammarAccess.getStatementListAccess().getAndKeyword_0());
			}
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementListAccess().getRelationRelationParserRuleCall_1_0_0());
					}
					lv_relation_1_0=ruleRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementListRule());
						}
						set(
							$current,
							"relation",
							lv_relation_1_0,
							"org.architecture.cnl.Archcnl.Relation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementListAccess().getExpressionConceptExpressionParserRuleCall_1_1_0_0());
						}
						lv_expression_2_0=ruleConceptExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementListRule());
							}
							set(
								$current,
								"expression",
								lv_expression_2_0,
								"org.architecture.cnl.Archcnl.ConceptExpression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementListAccess().getExpressionDataStatementParserRuleCall_1_1_1_0());
						}
						lv_expression_3_0=ruleDataStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementListRule());
							}
							set(
								$current,
								"expression",
								lv_expression_3_0,
								"org.architecture.cnl.Archcnl.DataStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getStatementListAccess().getExpressionVariableStatementParserRuleCall_1_1_2_0());
						}
						lv_expression_4_0=ruleVariableStatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getStatementListRule());
							}
							set(
								$current,
								"expression",
								lv_expression_4_0,
								"org.architecture.cnl.Archcnl.VariableStatement");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleVariableStatement
entryRuleVariableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableStatementRule()); }
	iv_ruleVariableStatement=ruleVariableStatement
	{ $current=$iv_ruleVariableStatement.current; }
	EOF;

// Rule VariableStatement
ruleVariableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableStatementAccess().getConceptConceptParserRuleCall_0_0());
				}
				lv_concept_0_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableStatementRule());
					}
					set(
						$current,
						"concept",
						lv_concept_0_0,
						"org.architecture.cnl.Archcnl.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableStatementAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.architecture.cnl.Archcnl.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDataStatement
entryRuleDataStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataStatementRule()); }
	iv_ruleDataStatement=ruleDataStatement
	{ $current=$iv_ruleDataStatement.current; }
	EOF;

// Rule DataStatement
ruleDataStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_stringValue_0_0=RULE_STRING
				{
					newLeafNode(lv_stringValue_0_0, grammarAccess.getDataStatementAccess().getStringValueSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataStatementRule());
					}
					setWithLastConsumed(
						$current,
						"stringValue",
						lv_stringValue_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			(
				lv_intValue_1_0=RULE_INT
				{
					newLeafNode(lv_intValue_1_0, grammarAccess.getDataStatementAccess().getIntValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDataStatementRule());
					}
					setWithLastConsumed(
						$current,
						"intValue",
						lv_intValue_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleFactStatement
entryRuleFactStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFactStatementRule()); }
	iv_ruleFactStatement=ruleFactStatement
	{ $current=$iv_ruleFactStatement.current; }
	EOF;

// Rule FactStatement
ruleFactStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFactStatementAccess().getAssertionConceptAssertionParserRuleCall_0_0_0());
					}
					lv_assertion_0_0=ruleConceptAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactStatementRule());
						}
						set(
							$current,
							"assertion",
							lv_assertion_0_0,
							"org.architecture.cnl.Archcnl.ConceptAssertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFactStatementAccess().getAssertionRoleAssertionParserRuleCall_0_1_0());
					}
					lv_assertion_1_0=ruleRoleAssertion
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFactStatementRule());
						}
						set(
							$current,
							"assertion",
							lv_assertion_1_0,
							"org.architecture.cnl.Archcnl.RoleAssertion");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_2='.'
		{
			newLeafNode(otherlv_2, grammarAccess.getFactStatementAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleConceptAssertion
entryRuleConceptAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptAssertionRule()); }
	iv_ruleConceptAssertion=ruleConceptAssertion
	{ $current=$iv_ruleConceptAssertion.current; }
	EOF;

// Rule ConceptAssertion
ruleConceptAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_individual_0_0=RULE_NAME
				{
					newLeafNode(lv_individual_0_0, grammarAccess.getConceptAssertionAccess().getIndividualNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConceptAssertionRule());
					}
					setWithLastConsumed(
						$current,
						"individual",
						lv_individual_0_0,
						"org.architecture.cnl.Archcnl.NAME");
				}
			)
		)
		otherlv_1='is'
		{
			newLeafNode(otherlv_1, grammarAccess.getConceptAssertionAccess().getIsKeyword_1());
		}
		(
			otherlv_2='a'
			{
				newLeafNode(otherlv_2, grammarAccess.getConceptAssertionAccess().getAKeyword_2_0());
			}
			    |
			otherlv_3='an'
			{
				newLeafNode(otherlv_3, grammarAccess.getConceptAssertionAccess().getAnKeyword_2_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConceptAssertionAccess().getConceptConceptParserRuleCall_3_0());
				}
				lv_concept_4_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConceptAssertionRule());
					}
					set(
						$current,
						"concept",
						lv_concept_4_0,
						"org.architecture.cnl.Archcnl.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='.'
		{
			newLeafNode(otherlv_5, grammarAccess.getConceptAssertionAccess().getFullStopKeyword_4());
		}
	)
;

// Entry rule entryRuleRoleAssertion
entryRuleRoleAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleAssertionRule()); }
	iv_ruleRoleAssertion=ruleRoleAssertion
	{ $current=$iv_ruleRoleAssertion.current; }
	EOF;

// Rule RoleAssertion
ruleRoleAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRoleAssertionAccess().getObjectPropertyAssertionParserRuleCall_0());
		}
		this_ObjectPropertyAssertion_0=ruleObjectPropertyAssertion
		{
			$current = $this_ObjectPropertyAssertion_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getRoleAssertionAccess().getDatatypePropertyAssertionParserRuleCall_1_0());
			}
			this_DatatypePropertyAssertion_1=ruleDatatypePropertyAssertion
			{
				$current = $this_DatatypePropertyAssertion_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getRoleAssertionAccess().getFullStopKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleDatatypePropertyAssertion
entryRuleDatatypePropertyAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatatypePropertyAssertionRule()); }
	iv_ruleDatatypePropertyAssertion=ruleDatatypePropertyAssertion
	{ $current=$iv_ruleDatatypePropertyAssertion.current; }
	EOF;

// Rule DatatypePropertyAssertion
ruleDatatypePropertyAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_individual_0_0=RULE_NAME
				{
					newLeafNode(lv_individual_0_0, grammarAccess.getDatatypePropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDatatypePropertyAssertionRule());
					}
					setWithLastConsumed(
						$current,
						"individual",
						lv_individual_0_0,
						"org.architecture.cnl.Archcnl.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatatypePropertyAssertionAccess().getRelationDatatypeRelationParserRuleCall_1_0());
				}
				lv_relation_1_0=ruleDatatypeRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatatypePropertyAssertionRule());
					}
					set(
						$current,
						"relation",
						lv_relation_1_0,
						"org.architecture.cnl.Archcnl.DatatypeRelation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_string_2_0=RULE_STRING
					{
						newLeafNode(lv_string_2_0, grammarAccess.getDatatypePropertyAssertionAccess().getStringSTRINGTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDatatypePropertyAssertionRule());
						}
						setWithLastConsumed(
							$current,
							"string",
							lv_string_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			    |
			(
				(
					lv_int_3_0=RULE_INT
					{
						newLeafNode(lv_int_3_0, grammarAccess.getDatatypePropertyAssertionAccess().getIntINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDatatypePropertyAssertionRule());
						}
						setWithLastConsumed(
							$current,
							"int",
							lv_int_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleObjectPropertyAssertion
entryRuleObjectPropertyAssertion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectPropertyAssertionRule()); }
	iv_ruleObjectPropertyAssertion=ruleObjectPropertyAssertion
	{ $current=$iv_ruleObjectPropertyAssertion.current; }
	EOF;

// Rule ObjectPropertyAssertion
ruleObjectPropertyAssertion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_individual_0_0=RULE_NAME
				{
					newLeafNode(lv_individual_0_0, grammarAccess.getObjectPropertyAssertionAccess().getIndividualNAMETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectPropertyAssertionRule());
					}
					setWithLastConsumed(
						$current,
						"individual",
						lv_individual_0_0,
						"org.architecture.cnl.Archcnl.NAME");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPropertyAssertionAccess().getRelationRelationParserRuleCall_1_0());
				}
				lv_relation_1_0=ruleRelation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPropertyAssertionRule());
					}
					set(
						$current,
						"relation",
						lv_relation_1_0,
						"org.architecture.cnl.Archcnl.Relation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='a'
			{
				newLeafNode(otherlv_2, grammarAccess.getObjectPropertyAssertionAccess().getAKeyword_2_0());
			}
			    |
			otherlv_3='an'
			{
				newLeafNode(otherlv_3, grammarAccess.getObjectPropertyAssertionAccess().getAnKeyword_2_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectPropertyAssertionAccess().getConceptConceptParserRuleCall_3_0());
				}
				lv_concept_4_0=ruleConcept
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectPropertyAssertionRule());
					}
					set(
						$current,
						"concept",
						lv_concept_4_0,
						"org.architecture.cnl.Archcnl.Concept");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConcept
entryRuleConcept returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConceptRule()); }
	iv_ruleConcept=ruleConcept
	{ $current=$iv_ruleConcept.current; }
	EOF;

// Rule Concept
ruleConcept returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_conceptName_0_0=RULE_NAME
			{
				newLeafNode(lv_conceptName_0_0, grammarAccess.getConceptAccess().getConceptNameNAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConceptRule());
				}
				setWithLastConsumed(
					$current,
					"conceptName",
					lv_conceptName_0_0,
					"org.architecture.cnl.Archcnl.NAME");
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_VARIABLE_NAME
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameVARIABLE_NAMETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.architecture.cnl.Archcnl.VARIABLE_NAME");
			}
		)
	)
;

RULE_RELATION_NAME : 'a'..'z' ('A'..'Z'|'a'..'z')+;

RULE_NAME : 'A'..'Z' ('A'..'Z'|'a'..'z')+;

RULE_VARIABLE_NAME : 'A'..'Z';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
