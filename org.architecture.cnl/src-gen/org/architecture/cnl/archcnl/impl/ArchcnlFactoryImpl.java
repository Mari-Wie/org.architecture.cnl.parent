/**
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.archcnl.impl;

import org.architecture.cnl.archcnl.AndObjectConceptExpression;
import org.architecture.cnl.archcnl.Anything;
import org.architecture.cnl.archcnl.ArchcnlFactory;
import org.architecture.cnl.archcnl.ArchcnlPackage;
import org.architecture.cnl.archcnl.CanOnlyRuleType;
import org.architecture.cnl.archcnl.CardinalityRuleType;
import org.architecture.cnl.archcnl.Concept;
import org.architecture.cnl.archcnl.ConceptAssertion;
import org.architecture.cnl.archcnl.ConceptExpression;
import org.architecture.cnl.archcnl.ConditionalRuleType;
import org.architecture.cnl.archcnl.DataStatement;
import org.architecture.cnl.archcnl.DatatypePropertyAssertion;
import org.architecture.cnl.archcnl.DatatypeRelation;
import org.architecture.cnl.archcnl.FactStatement;
import org.architecture.cnl.archcnl.Model;
import org.architecture.cnl.archcnl.MustRuleType;
import org.architecture.cnl.archcnl.NegationRuleType;
import org.architecture.cnl.archcnl.Nothing;
import org.architecture.cnl.archcnl.ObjectConceptExpression;
import org.architecture.cnl.archcnl.ObjectPropertyAssertion;
import org.architecture.cnl.archcnl.ObjectRelation;
import org.architecture.cnl.archcnl.OnlyCanRuleType;
import org.architecture.cnl.archcnl.OrObjectConceptExpression;
import org.architecture.cnl.archcnl.Relation;
import org.architecture.cnl.archcnl.RoleAssertion;
import org.architecture.cnl.archcnl.Sentence;
import org.architecture.cnl.archcnl.StatementList;
import org.architecture.cnl.archcnl.SubConceptRuleType;
import org.architecture.cnl.archcnl.ThatExpression;
import org.architecture.cnl.archcnl.Variable;
import org.architecture.cnl.archcnl.VariableStatement;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ArchcnlFactoryImpl extends EFactoryImpl implements ArchcnlFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ArchcnlFactory init()
  {
    try
    {
      ArchcnlFactory theArchcnlFactory = (ArchcnlFactory)EPackage.Registry.INSTANCE.getEFactory(ArchcnlPackage.eNS_URI);
      if (theArchcnlFactory != null)
      {
        return theArchcnlFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ArchcnlFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArchcnlFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ArchcnlPackage.MODEL: return createModel();
      case ArchcnlPackage.SENTENCE: return createSentence();
      case ArchcnlPackage.NEGATION_RULE_TYPE: return createNegationRuleType();
      case ArchcnlPackage.ANYTHING: return createAnything();
      case ArchcnlPackage.NOTHING: return createNothing();
      case ArchcnlPackage.CONDITIONAL_RULE_TYPE: return createConditionalRuleType();
      case ArchcnlPackage.ONLY_CAN_RULE_TYPE: return createOnlyCanRuleType();
      case ArchcnlPackage.SUB_CONCEPT_RULE_TYPE: return createSubConceptRuleType();
      case ArchcnlPackage.MUST_RULE_TYPE: return createMustRuleType();
      case ArchcnlPackage.OBJECT: return createObject();
      case ArchcnlPackage.CAN_ONLY_RULE_TYPE: return createCanOnlyRuleType();
      case ArchcnlPackage.CARDINALITY_RULE_TYPE: return createCardinalityRuleType();
      case ArchcnlPackage.OBJECT_CONCEPT_EXPRESSION: return createObjectConceptExpression();
      case ArchcnlPackage.AND_OBJECT_CONCEPT_EXPRESSION: return createAndObjectConceptExpression();
      case ArchcnlPackage.OR_OBJECT_CONCEPT_EXPRESSION: return createOrObjectConceptExpression();
      case ArchcnlPackage.RELATION: return createRelation();
      case ArchcnlPackage.DATATYPE_RELATION: return createDatatypeRelation();
      case ArchcnlPackage.OBJECT_RELATION: return createObjectRelation();
      case ArchcnlPackage.CONCEPT_EXPRESSION: return createConceptExpression();
      case ArchcnlPackage.THAT_EXPRESSION: return createThatExpression();
      case ArchcnlPackage.STATEMENT_LIST: return createStatementList();
      case ArchcnlPackage.VARIABLE_STATEMENT: return createVariableStatement();
      case ArchcnlPackage.DATA_STATEMENT: return createDataStatement();
      case ArchcnlPackage.FACT_STATEMENT: return createFactStatement();
      case ArchcnlPackage.CONCEPT_ASSERTION: return createConceptAssertion();
      case ArchcnlPackage.ROLE_ASSERTION: return createRoleAssertion();
      case ArchcnlPackage.DATATYPE_PROPERTY_ASSERTION: return createDatatypePropertyAssertion();
      case ArchcnlPackage.OBJECT_PROPERTY_ASSERTION: return createObjectPropertyAssertion();
      case ArchcnlPackage.CONCEPT: return createConcept();
      case ArchcnlPackage.VARIABLE: return createVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sentence createSentence()
  {
    SentenceImpl sentence = new SentenceImpl();
    return sentence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegationRuleType createNegationRuleType()
  {
    NegationRuleTypeImpl negationRuleType = new NegationRuleTypeImpl();
    return negationRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Anything createAnything()
  {
    AnythingImpl anything = new AnythingImpl();
    return anything;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Nothing createNothing()
  {
    NothingImpl nothing = new NothingImpl();
    return nothing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalRuleType createConditionalRuleType()
  {
    ConditionalRuleTypeImpl conditionalRuleType = new ConditionalRuleTypeImpl();
    return conditionalRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OnlyCanRuleType createOnlyCanRuleType()
  {
    OnlyCanRuleTypeImpl onlyCanRuleType = new OnlyCanRuleTypeImpl();
    return onlyCanRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SubConceptRuleType createSubConceptRuleType()
  {
    SubConceptRuleTypeImpl subConceptRuleType = new SubConceptRuleTypeImpl();
    return subConceptRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MustRuleType createMustRuleType()
  {
    MustRuleTypeImpl mustRuleType = new MustRuleTypeImpl();
    return mustRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.architecture.cnl.archcnl.Object createObject()
  {
    ObjectImpl object = new ObjectImpl();
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CanOnlyRuleType createCanOnlyRuleType()
  {
    CanOnlyRuleTypeImpl canOnlyRuleType = new CanOnlyRuleTypeImpl();
    return canOnlyRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CardinalityRuleType createCardinalityRuleType()
  {
    CardinalityRuleTypeImpl cardinalityRuleType = new CardinalityRuleTypeImpl();
    return cardinalityRuleType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectConceptExpression createObjectConceptExpression()
  {
    ObjectConceptExpressionImpl objectConceptExpression = new ObjectConceptExpressionImpl();
    return objectConceptExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AndObjectConceptExpression createAndObjectConceptExpression()
  {
    AndObjectConceptExpressionImpl andObjectConceptExpression = new AndObjectConceptExpressionImpl();
    return andObjectConceptExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrObjectConceptExpression createOrObjectConceptExpression()
  {
    OrObjectConceptExpressionImpl orObjectConceptExpression = new OrObjectConceptExpressionImpl();
    return orObjectConceptExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Relation createRelation()
  {
    RelationImpl relation = new RelationImpl();
    return relation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatatypeRelation createDatatypeRelation()
  {
    DatatypeRelationImpl datatypeRelation = new DatatypeRelationImpl();
    return datatypeRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectRelation createObjectRelation()
  {
    ObjectRelationImpl objectRelation = new ObjectRelationImpl();
    return objectRelation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptExpression createConceptExpression()
  {
    ConceptExpressionImpl conceptExpression = new ConceptExpressionImpl();
    return conceptExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThatExpression createThatExpression()
  {
    ThatExpressionImpl thatExpression = new ThatExpressionImpl();
    return thatExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatementList createStatementList()
  {
    StatementListImpl statementList = new StatementListImpl();
    return statementList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableStatement createVariableStatement()
  {
    VariableStatementImpl variableStatement = new VariableStatementImpl();
    return variableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataStatement createDataStatement()
  {
    DataStatementImpl dataStatement = new DataStatementImpl();
    return dataStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FactStatement createFactStatement()
  {
    FactStatementImpl factStatement = new FactStatementImpl();
    return factStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptAssertion createConceptAssertion()
  {
    ConceptAssertionImpl conceptAssertion = new ConceptAssertionImpl();
    return conceptAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleAssertion createRoleAssertion()
  {
    RoleAssertionImpl roleAssertion = new RoleAssertionImpl();
    return roleAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatatypePropertyAssertion createDatatypePropertyAssertion()
  {
    DatatypePropertyAssertionImpl datatypePropertyAssertion = new DatatypePropertyAssertionImpl();
    return datatypePropertyAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectPropertyAssertion createObjectPropertyAssertion()
  {
    ObjectPropertyAssertionImpl objectPropertyAssertion = new ObjectPropertyAssertionImpl();
    return objectPropertyAssertion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept createConcept()
  {
    ConceptImpl concept = new ConceptImpl();
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArchcnlPackage getArchcnlPackage()
  {
    return (ArchcnlPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ArchcnlPackage getPackage()
  {
    return ArchcnlPackage.eINSTANCE;
  }

} //ArchcnlFactoryImpl
