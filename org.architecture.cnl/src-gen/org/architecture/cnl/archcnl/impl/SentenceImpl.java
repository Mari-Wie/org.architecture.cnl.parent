/**
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.archcnl.impl;

import java.util.Collection;

import org.architecture.cnl.archcnl.ArchcnlPackage;
import org.architecture.cnl.archcnl.ConceptExpression;
import org.architecture.cnl.archcnl.FactStatement;
import org.architecture.cnl.archcnl.Sentence;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Sentence</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.architecture.cnl.archcnl.impl.SentenceImpl#getSubject <em>Subject</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.SentenceImpl#getRuletype <em>Ruletype</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.SentenceImpl#getFacts <em>Facts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SentenceImpl extends MinimalEObjectImpl.Container implements Sentence
{
  /**
   * The cached value of the '{@link #getSubject() <em>Subject</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubject()
   * @generated
   * @ordered
   */
  protected ConceptExpression subject;

  /**
   * The cached value of the '{@link #getRuletype() <em>Ruletype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRuletype()
   * @generated
   * @ordered
   */
  protected EObject ruletype;

  /**
   * The cached value of the '{@link #getFacts() <em>Facts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFacts()
   * @generated
   * @ordered
   */
  protected EList<FactStatement> facts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SentenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArchcnlPackage.Literals.SENTENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptExpression getSubject()
  {
    return subject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubject(ConceptExpression newSubject, NotificationChain msgs)
  {
    ConceptExpression oldSubject = subject;
    subject = newSubject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArchcnlPackage.SENTENCE__SUBJECT, oldSubject, newSubject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSubject(ConceptExpression newSubject)
  {
    if (newSubject != subject)
    {
      NotificationChain msgs = null;
      if (subject != null)
        msgs = ((InternalEObject)subject).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.SENTENCE__SUBJECT, null, msgs);
      if (newSubject != null)
        msgs = ((InternalEObject)newSubject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.SENTENCE__SUBJECT, null, msgs);
      msgs = basicSetSubject(newSubject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArchcnlPackage.SENTENCE__SUBJECT, newSubject, newSubject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getRuletype()
  {
    return ruletype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRuletype(EObject newRuletype, NotificationChain msgs)
  {
    EObject oldRuletype = ruletype;
    ruletype = newRuletype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArchcnlPackage.SENTENCE__RULETYPE, oldRuletype, newRuletype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRuletype(EObject newRuletype)
  {
    if (newRuletype != ruletype)
    {
      NotificationChain msgs = null;
      if (ruletype != null)
        msgs = ((InternalEObject)ruletype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.SENTENCE__RULETYPE, null, msgs);
      if (newRuletype != null)
        msgs = ((InternalEObject)newRuletype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.SENTENCE__RULETYPE, null, msgs);
      msgs = basicSetRuletype(newRuletype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArchcnlPackage.SENTENCE__RULETYPE, newRuletype, newRuletype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FactStatement> getFacts()
  {
    if (facts == null)
    {
      facts = new EObjectContainmentEList<FactStatement>(FactStatement.class, this, ArchcnlPackage.SENTENCE__FACTS);
    }
    return facts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArchcnlPackage.SENTENCE__SUBJECT:
        return basicSetSubject(null, msgs);
      case ArchcnlPackage.SENTENCE__RULETYPE:
        return basicSetRuletype(null, msgs);
      case ArchcnlPackage.SENTENCE__FACTS:
        return ((InternalEList<?>)getFacts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArchcnlPackage.SENTENCE__SUBJECT:
        return getSubject();
      case ArchcnlPackage.SENTENCE__RULETYPE:
        return getRuletype();
      case ArchcnlPackage.SENTENCE__FACTS:
        return getFacts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArchcnlPackage.SENTENCE__SUBJECT:
        setSubject((ConceptExpression)newValue);
        return;
      case ArchcnlPackage.SENTENCE__RULETYPE:
        setRuletype((EObject)newValue);
        return;
      case ArchcnlPackage.SENTENCE__FACTS:
        getFacts().clear();
        getFacts().addAll((Collection<? extends FactStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.SENTENCE__SUBJECT:
        setSubject((ConceptExpression)null);
        return;
      case ArchcnlPackage.SENTENCE__RULETYPE:
        setRuletype((EObject)null);
        return;
      case ArchcnlPackage.SENTENCE__FACTS:
        getFacts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.SENTENCE__SUBJECT:
        return subject != null;
      case ArchcnlPackage.SENTENCE__RULETYPE:
        return ruletype != null;
      case ArchcnlPackage.SENTENCE__FACTS:
        return facts != null && !facts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SentenceImpl
