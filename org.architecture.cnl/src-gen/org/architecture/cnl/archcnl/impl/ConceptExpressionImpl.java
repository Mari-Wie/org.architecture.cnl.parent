/**
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.archcnl.impl;

import java.util.Collection;

import org.architecture.cnl.archcnl.ArchcnlPackage;
import org.architecture.cnl.archcnl.Concept;
import org.architecture.cnl.archcnl.ConceptExpression;
import org.architecture.cnl.archcnl.ThatExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concept Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ConceptExpressionImpl#getConcept <em>Concept</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ConceptExpressionImpl#getThat <em>That</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConceptExpressionImpl extends MinimalEObjectImpl.Container implements ConceptExpression
{
  /**
   * The cached value of the '{@link #getConcept() <em>Concept</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConcept()
   * @generated
   * @ordered
   */
  protected Concept concept;

  /**
   * The cached value of the '{@link #getThat() <em>That</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThat()
   * @generated
   * @ordered
   */
  protected EList<ThatExpression> that;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConceptExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArchcnlPackage.Literals.CONCEPT_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept getConcept()
  {
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConcept(Concept newConcept, NotificationChain msgs)
  {
    Concept oldConcept = concept;
    concept = newConcept;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT, oldConcept, newConcept);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConcept(Concept newConcept)
  {
    if (newConcept != concept)
    {
      NotificationChain msgs = null;
      if (concept != null)
        msgs = ((InternalEObject)concept).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT, null, msgs);
      if (newConcept != null)
        msgs = ((InternalEObject)newConcept).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT, null, msgs);
      msgs = basicSetConcept(newConcept, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT, newConcept, newConcept));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ThatExpression> getThat()
  {
    if (that == null)
    {
      that = new EObjectContainmentEList<ThatExpression>(ThatExpression.class, this, ArchcnlPackage.CONCEPT_EXPRESSION__THAT);
    }
    return that;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT:
        return basicSetConcept(null, msgs);
      case ArchcnlPackage.CONCEPT_EXPRESSION__THAT:
        return ((InternalEList<?>)getThat()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT:
        return getConcept();
      case ArchcnlPackage.CONCEPT_EXPRESSION__THAT:
        return getThat();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT:
        setConcept((Concept)newValue);
        return;
      case ArchcnlPackage.CONCEPT_EXPRESSION__THAT:
        getThat().clear();
        getThat().addAll((Collection<? extends ThatExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT:
        setConcept((Concept)null);
        return;
      case ArchcnlPackage.CONCEPT_EXPRESSION__THAT:
        getThat().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.CONCEPT_EXPRESSION__CONCEPT:
        return concept != null;
      case ArchcnlPackage.CONCEPT_EXPRESSION__THAT:
        return that != null && !that.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ConceptExpressionImpl
