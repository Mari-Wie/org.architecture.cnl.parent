/**
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.archcnl.impl;

import java.util.Collection;

import org.architecture.cnl.archcnl.AndObjectConceptExpression;
import org.architecture.cnl.archcnl.Anything;
import org.architecture.cnl.archcnl.ArchcnlPackage;
import org.architecture.cnl.archcnl.ObjectConceptExpression;
import org.architecture.cnl.archcnl.OrObjectConceptExpression;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ObjectImpl#getAnything <em>Anything</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ObjectImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ObjectImpl#getObjectAndList <em>Object And List</em>}</li>
 *   <li>{@link org.architecture.cnl.archcnl.impl.ObjectImpl#getObjectOrList <em>Object Or List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObjectImpl extends MinimalEObjectImpl.Container implements org.architecture.cnl.archcnl.Object
{
  /**
   * The cached value of the '{@link #getAnything() <em>Anything</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnything()
   * @generated
   * @ordered
   */
  protected Anything anything;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected ObjectConceptExpression expression;

  /**
   * The cached value of the '{@link #getObjectAndList() <em>Object And List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectAndList()
   * @generated
   * @ordered
   */
  protected EList<AndObjectConceptExpression> objectAndList;

  /**
   * The cached value of the '{@link #getObjectOrList() <em>Object Or List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjectOrList()
   * @generated
   * @ordered
   */
  protected EList<OrObjectConceptExpression> objectOrList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArchcnlPackage.Literals.OBJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Anything getAnything()
  {
    return anything;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnything(Anything newAnything, NotificationChain msgs)
  {
    Anything oldAnything = anything;
    anything = newAnything;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArchcnlPackage.OBJECT__ANYTHING, oldAnything, newAnything);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAnything(Anything newAnything)
  {
    if (newAnything != anything)
    {
      NotificationChain msgs = null;
      if (anything != null)
        msgs = ((InternalEObject)anything).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.OBJECT__ANYTHING, null, msgs);
      if (newAnything != null)
        msgs = ((InternalEObject)newAnything).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.OBJECT__ANYTHING, null, msgs);
      msgs = basicSetAnything(newAnything, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArchcnlPackage.OBJECT__ANYTHING, newAnything, newAnything));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectConceptExpression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(ObjectConceptExpression newExpression, NotificationChain msgs)
  {
    ObjectConceptExpression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ArchcnlPackage.OBJECT__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(ObjectConceptExpression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.OBJECT__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ArchcnlPackage.OBJECT__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ArchcnlPackage.OBJECT__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AndObjectConceptExpression> getObjectAndList()
  {
    if (objectAndList == null)
    {
      objectAndList = new EObjectContainmentEList<AndObjectConceptExpression>(AndObjectConceptExpression.class, this, ArchcnlPackage.OBJECT__OBJECT_AND_LIST);
    }
    return objectAndList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<OrObjectConceptExpression> getObjectOrList()
  {
    if (objectOrList == null)
    {
      objectOrList = new EObjectContainmentEList<OrObjectConceptExpression>(OrObjectConceptExpression.class, this, ArchcnlPackage.OBJECT__OBJECT_OR_LIST);
    }
    return objectOrList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArchcnlPackage.OBJECT__ANYTHING:
        return basicSetAnything(null, msgs);
      case ArchcnlPackage.OBJECT__EXPRESSION:
        return basicSetExpression(null, msgs);
      case ArchcnlPackage.OBJECT__OBJECT_AND_LIST:
        return ((InternalEList<?>)getObjectAndList()).basicRemove(otherEnd, msgs);
      case ArchcnlPackage.OBJECT__OBJECT_OR_LIST:
        return ((InternalEList<?>)getObjectOrList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArchcnlPackage.OBJECT__ANYTHING:
        return getAnything();
      case ArchcnlPackage.OBJECT__EXPRESSION:
        return getExpression();
      case ArchcnlPackage.OBJECT__OBJECT_AND_LIST:
        return getObjectAndList();
      case ArchcnlPackage.OBJECT__OBJECT_OR_LIST:
        return getObjectOrList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArchcnlPackage.OBJECT__ANYTHING:
        setAnything((Anything)newValue);
        return;
      case ArchcnlPackage.OBJECT__EXPRESSION:
        setExpression((ObjectConceptExpression)newValue);
        return;
      case ArchcnlPackage.OBJECT__OBJECT_AND_LIST:
        getObjectAndList().clear();
        getObjectAndList().addAll((Collection<? extends AndObjectConceptExpression>)newValue);
        return;
      case ArchcnlPackage.OBJECT__OBJECT_OR_LIST:
        getObjectOrList().clear();
        getObjectOrList().addAll((Collection<? extends OrObjectConceptExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.OBJECT__ANYTHING:
        setAnything((Anything)null);
        return;
      case ArchcnlPackage.OBJECT__EXPRESSION:
        setExpression((ObjectConceptExpression)null);
        return;
      case ArchcnlPackage.OBJECT__OBJECT_AND_LIST:
        getObjectAndList().clear();
        return;
      case ArchcnlPackage.OBJECT__OBJECT_OR_LIST:
        getObjectOrList().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArchcnlPackage.OBJECT__ANYTHING:
        return anything != null;
      case ArchcnlPackage.OBJECT__EXPRESSION:
        return expression != null;
      case ArchcnlPackage.OBJECT__OBJECT_AND_LIST:
        return objectAndList != null && !objectAndList.isEmpty();
      case ArchcnlPackage.OBJECT__OBJECT_OR_LIST:
        return objectOrList != null && !objectOrList.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ObjectImpl
