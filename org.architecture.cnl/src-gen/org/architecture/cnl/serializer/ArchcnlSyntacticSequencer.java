/*
 * generated by Xtext 2.22.0
 */
package org.architecture.cnl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.architecture.cnl.services.ArchcnlGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ArchcnlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ArchcnlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConceptAssertion_AKeyword_2_0_or_AnKeyword_2_1;
	protected AbstractElementAlias match_ConceptExpression___AKeyword_0_0_or_AnKeyword_0_1__q;
	protected AbstractElementAlias match_ObjectPropertyAssertion_AKeyword_2_0_or_AnKeyword_2_1;
	protected AbstractElementAlias match_StatementList_AndKeyword_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ArchcnlGrammarAccess) access;
		match_ConceptAssertion_AKeyword_2_0_or_AnKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConceptAssertionAccess().getAKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getConceptAssertionAccess().getAnKeyword_2_1()));
		match_ConceptExpression___AKeyword_0_0_or_AnKeyword_0_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getConceptExpressionAccess().getAKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConceptExpressionAccess().getAnKeyword_0_1()));
		match_ObjectPropertyAssertion_AKeyword_2_0_or_AnKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectPropertyAssertionAccess().getAKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getObjectPropertyAssertionAccess().getAnKeyword_2_1()));
		match_StatementList_AndKeyword_0_q = new TokenAlias(false, true, grammarAccess.getStatementListAccess().getAndKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConceptAssertion_AKeyword_2_0_or_AnKeyword_2_1.equals(syntax))
				emit_ConceptAssertion_AKeyword_2_0_or_AnKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConceptExpression___AKeyword_0_0_or_AnKeyword_0_1__q.equals(syntax))
				emit_ConceptExpression___AKeyword_0_0_or_AnKeyword_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectPropertyAssertion_AKeyword_2_0_or_AnKeyword_2_1.equals(syntax))
				emit_ObjectPropertyAssertion_AKeyword_2_0_or_AnKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementList_AndKeyword_0_q.equals(syntax))
				emit_StatementList_AndKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'a' | 'an'
	 *
	 * This ambiguous syntax occurs at:
	 *     individual=NAME 'is' (ambiguity) concept=Concept
	 */
	protected void emit_ConceptAssertion_AKeyword_2_0_or_AnKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('a' | 'an')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) concept=Concept
	 */
	protected void emit_ConceptExpression___AKeyword_0_0_or_AnKeyword_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'a' | 'an'
	 *
	 * This ambiguous syntax occurs at:
	 *     relation=Relation (ambiguity) concept=Concept
	 */
	protected void emit_ObjectPropertyAssertion_AKeyword_2_0_or_AnKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'and'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) relation=Relation
	 */
	protected void emit_StatementList_AndKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
